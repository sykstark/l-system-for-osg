<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % fithesis SYSTEM "http://www.fi.muni.cz/~xpavlov/fithesis.mod">
   %fithesis; ]>

<book lang="cs" xmlns:fi="http://www.fi.muni.cz/~xpavlov/fithesis">

<bookinfo>
    <title>Studio pro grafický návrh podlahových krytin v interiéru</title>
    <subtitle>Bakalářská práce</subtitle>
    <author>
        <firstname>Marek</firstname>
        <surname>Pasičnyk</surname>
        <fi:woman>false</fi:woman>
        <fi:faculty>fi</fi:faculty>
        <fi:advisor>Mgr. Petr Tobola, Ph.D.</fi:advisor>
    </author>
    <pubdate>podzim 2007</pubdate>
    <fi:thanks><para>Chtěl bych poděkovat Mgr. Petru Tobolovi, Ph.D. za vedení bakalářské práce a jeho cenné rady při řešení této práce. Také bych rád poděkoval celé své rodině i své přítelkyni za neocenitelnou podporu a trpělivost.
    </para></fi:thanks>
    <abstract>
        <para>
        Tato práce se zabývá problematikou návrhu a kalkulace plovoucích podlah v interiérech a&nbsp;následnou implementací v CAD systémech. Cílem bylo vyvinout uživatelsky jednoduchou aplikaci pro rychlý návrh interiérů napodobující klasické metody pokládky. Tím posléze docílit co nejpřesnější kalkulace materiálu a vizuálně věrného zobrazení v cílovém prostoru.
        </para>
    </abstract>
    <keywordset>
   		<keyword>AEC</keyword>
   		<keyword>CAD</keyword>
        <keyword>OpenGL</keyword>
        <keyword>plovoucí podlahy</keyword>
        <keyword>návrh interiéru</keyword>
        <keyword>vizualizace interiéru</keyword>
        <keyword>kladečské plány</keyword>
        <keyword>FloorPlanner</keyword>
    </keywordset>
</bookinfo>

<toc/>

<chapter id="ch01">
   <title>Úvod</title>
   <para>Různé kreslicí metody patří v architektuře již odedávna k základním metodám přenesení představ na papír či jiné médium. Vznikají tak dvojrozměrné nákresy, které jsou nepostradatelné pro veškerá odvětví architektury. Nákresy plní velmi důležitou úlohu při plánovaní i realizaci staveb. Jsou totiž jakýmsi spojením mezi architekty a lidmi, kteří daný projekt realizují. Ruku v ruce s dvojrozměrným nákresem se často vytváří trojrozměrný model. A protože lidský mozek zpracovává sérii bokorysů, půdorysů a nárysů dost obtížně, zhmotňuje trojrozměrný model lidské představy podstatně lépe. S příchodem počítačů s pokročilejšími grafickými jednotkami bylo možné tyto dvě, do této doby oddělené, metody návrhu spojit a zároveň přidat čtvrtý rozměr – animaci. Od průlomového vynálezu světelného pera se tyto systémy a aplikace velice rychle vyvíjely a získaly z anglického <emphasis>computer-aided design</emphasis> zkrácené označení <emphasis>CAD</emphasis>. Tato zkratka však nezahrnuje jen aplikace určené pro stavebnictví, ale i pro ostatní odvětví, používající při práci rýsovací prkno. Pro systémy, navržené speciálně pro architekturu a stavebnictví, se pak vžila zkratka <emphasis>AEC</emphasis>, z anglického <emphasis>Architecture, Engineering, Construction</emphasis>.
   </para>
   <para><emphasis>CAD</emphasis> se zpočátku ve stavitelství používal výhradně k návrhům exteriérů. Bylo tomu tak zejména kvůli nízké kvalitě zobrazení, která byla pro exteriérové prostory dostačující, avšak pro interiéry nikoli. Dnes je již však situace jiná a existuje celá řada nástrojů a aplikací pro&nbsp;návrh interiérů. Dokonce v podstatě každá velká firma zabývající se vybavením interiérů poskytuje ke svému sortimentu i nějakou více či méně sofistikovanou aplikaci pro&nbsp;zobrazení kolekce svých výrobků v prostoru.
   </para>
   <para>Vizualizace interiérů bývá často zásadní, ale zdaleka ne jediným využitím těchto aplikací. Pomáhají totiž zároveň přesněji specifikovat náklady na celý projekt. Proto je zde vždy snaha o vytvoření co nejpřesnějšího modelu, který následně může ušetřit velké množství financí. Tento problém existuje i u návrhu plovoucích podlah. Jednoduché kalkulace materiálu zde, kvůli předem těžko předvídatelnému odpadu, často selhávají. Proto je vytvoření aplikace pro řešení této problematiky velkým přínosem pro toto odvětví.
   </para>
   <para>Tato práce se věnuje vývoji grafického studia pro vizualizaci a kalkulaci plovoucích podlah v interiéru. Cílem je vytvořit aplikaci, která jednoduchým způsobem vytvoří a zobrazí uživatelem nakreslenou místnost včetně zvolené plovoucí podlahy. Vzhled plovoucí podlahy je při tom co nejvíce přiblížen reálnému vzhledu v dané místnosti. Plovoucí podlaha je totiž vykreslena podle stejných pravidel, jakými se řídí reálná pokládka podlah. Tím lze docílit přesného zobrazení podlahy v prostoru a zároveň získat velmi přesné údaje o nákladech na realizaci. 
	</para>
	<para>Na začátku práce je podrobněji rozvedena problematika návrhu a kalkulace interiérů. Kromě toho je zde také popsán vývoj <emphasis>CAD</emphasis> aplikací a jejich využití v oblasti návrhu interiérů. Obsahem další kapitoly je popis a zhodnocení některých aplikací, zabývajících se podobnou problematikou. Ve čtvrté kapitole se práce věnuje algoritmům a postupům, které byly stěžejní pro vývoj aplikace <emphasis>FloorPlanner</emphasis>. Ta je popsána v následující kapitole. Vysvětlení implementací modifikovaných algoritmů jsou obsahem předposlední šesté kapitoly. Práci uzávírá závěrečná kapitola se zhodnocením přínosu aplikace.
	</para>
</chapter>
<chapter id="ch02">
	<title>Problematika návrhu interiéru</title>
   	<sect1 id="sec0201">
   		<title>Teorie pokládky a kalkulace plovoucích podlah</title>
   		<para>
Plovoucí podlahy jsou moderním prvkem současného architektonického prostoru. Jejich popularita stále roste a jsou vyvíjeny nejrůznější nové technologie a materiály pro jejich výrobu. Vzniká tak široká škála plovoucích podlah z celého světa, které se kvalitativně velmi liší. Cena těch nejinovativnějších a nejkvalitnějších řešení se pohybuje v řádu několika tisíc korun za metr čtvereční. Vzniká proto potřeba co nejpřesnějšího odhadu nákladů na realizaci daného projektu. Tyto moderní podlahy bývají navíc často pokládány v moderních atypických prostorech, kde bývá odhad dosti obtížný. Řešení nabízí aplikace <emphasis>FloorPlanner</emphasis>, jež vznikla v rámci této práce. Jejím úkolem je příblížit odhad skutečným nákladům.
		</para>
		<para>
Odhad se většinou provádí jednoduchým přičtením prořezu k ploše místnosti. Prořez tvoří ořezané části podlahových dílců, které již nemohou být použity pro pokládku a tvoří nutný odpad. Většinou je odhadovaný prořez 5 až 7 %. Reálně však může kolísat mezi 3 a&nbsp;15&nbsp;%. Množství prořezu je závislé na mnoha faktorech:
		</para>
		<para>
			<itemizedlist mark="opencircle">
				<listitem><simpara><emphasis role="bold">Velikost místnosti</emphasis> &mdash; množství prořezu je nepřímo závislé na velikosti místnosti. Ve&nbsp;větších místnostech, kde se dá položit větší procento celých podlahových lamel, bývá mnohem méně odpadu.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Velikost lamel</emphasis> &mdash; s rostoucí velikostí podlahových dílců se rapidně zvyšuje i odpad. Navíc právě nejdražší celodřevěné plovoucí podlahy jsou vyráběny ve velmi dlouhých formátech podlahových lamel. Tato skupina podlah tvoří nejproblematičtější skupinu při odhadu nákladů.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Orientace lamel</emphasis> &mdash; směr pokládky se ve většině případů řídí jednou z obvodových zdí. U zdí, které nemají shodný, nebo kolmý úhel ke zdi řídící, vzniká u každé řezané lamely nezanedbatelný odpad.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Balení podlah</emphasis> &mdash; plovoucí podlahy nejsou dodávány po jednotlivých kusech, nýbrž v baleních po několika kusech. To se stává problémem zvláště u velkoformátových lamel, kdy ve středně velké místnosti může rozdíl jednoho balení přesáhnout i 15 % z finálních nákladů. Proto je třeba k tomuto faktu přihlédnout a odhadnout množství co nejlépe.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Styl pokládky</emphasis> &mdash; existuje několik způsobů, jak lze lamely vůči sobě pokládat. Nejstriktnější <emphasis>selský styl</emphasis>, který dovoluje pouze přibližně poloviční překryv lamel v sousedících řadách, dosahuje největšího odpadu. Následuje <emphasis>anglický styl</emphasis>, kdy musí být překryv u všech lamel shodný. Nejběžnější je však <emphasis>rustikální styl</emphasis>, u kterého je nutné dodržet pouze minimální překrytí. Spotřebuje se tak i mnohem méně materálu.
 				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Optický vzhled podlah</emphasis> &mdash; plovoucí podlahy jsou dnes ozvláštňovány různými prvky, které mění jejich optické vlastnosti v ploše. Jejich hrany mohou být například zkoseny a tak vytvářet podélné či oběžné spáry. Různá orientace pokládky pak může prostor opticky zúžit, nebo rozšiřovat. Často se podlahy pro opticky harmonický vzhled orientují podle dveří či oken.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Ostatní aspekty</emphasis> &mdash; kromě přibližně předvídatelných aspektů však existují i faktory, které při návrhu předvídat nelze. Mezi ně patří nedokonalý tvar zdí místnosti, lamely s výrobními vadami nebo chyby a nepřesnosti podlahářů při realizaci. Proto je vždy třeba brát výsledky kalkulace s rezervou. 
				</simpara></listitem>
			</itemizedlist>
   		</para>
   	</sect1>
   	<sect1 id="sec0202">
   		<title>CAD aplikace</title>
   		<para>
   		<emphasis>Computer Aided Design</emphasis> neboli počítačem podporovaný návrh je souhrnným názvem pro aplikace nebo obor zabývající se projektováním či konstruováním na počítači. Jedná se tedy o přenesení rýsovacího plátna na obrazovky počítačů. Proto je zde zahrnuta celá řada oborově různorodých aplikací od elektrotechniky, strojírenství až po stavebnictví.
   		</para>
   		<sect2 id="sec020201">
   			<title>Historie a současný stav</title>
   			<para>
   			Kreslicí aplikace se začaly vyvíjet už v padesátých letech po vynálezu světelného pera, avšak první <emphasis>CAD</emphasis> aplikace vznikla až roku 1962 díky <emphasis>Ivanu Sutherlandovi</emphasis><footnote id="fn02020101"><para>Kreslicí program <emphasis>Sketchpad</emphasis> byl předmětem Sutherlandovy disertační práce.</para></footnote>. Větší rozšíření přišlo až v sedmdesátých letech s příchodem minipočítačů. I přes značný pokrok však grafika stále zůstávala vektorová a práce s aplikacemi byla uživatelsky dosti nepřátelská. Zlom přišel až v roce 1978 s příchodem rastrové grafiky. Přicházely i nové algoritmy v počítačové grafice, a tak například v roce 1980 vzniká modul pro <emphasis>AEC/CAD</emphasis> aplikaci <emphasis>Arch Model</emphasis><citation>CAD history</citation>, který dokáže poprvé renderovat plochy objektů.
   			</para>
   			<para>
   			Po příchodu procesorů <emphasis>Intel x86</emphasis> dochází ke standardizaci hardware a grafické aplikace se postupně přesouvají i na osobní počítače. Vznikají editory jako <emphasis>AutoCAD</emphasis>, <emphasis>VersaCAD</emphasis> a&nbsp;jiné. Zvětšil se také význam trojrozměrného modelu, který původně tvořil spíše presentační funkci. V dnešní době je návrh ve dvou a třech rozměrech propojen, což přispívá k větší přesnosti finálních návrhů. Během této éry vznikají v počítačové grafice nové pokročilé metody jako jsou osvětlovací modely s podporou radiozity, sledování paprsku nebo kvalitní mapování a filtrování textur. Díky jejich implementacím v <emphasis>CAD</emphasis> aplikacích jsou dnes vizualizace modelů téměř fotorealisticky přesné.
   			</para>
   			<para>
   			Výrazným přínosem je i intuitivnější interakce člověka s počítačem. Už samotný přechod z rýsovacího prkna na počítač znamenal podstatnou úsporu času. Zpočátku dosti rozdílné aplikace se dnes vlivem konkurenčního prostředí stávají velice podobnými. Existují však dvě velice rozdílné kategorie <emphasis>CAD</emphasis> systémů. 
   			</para>
   			<para>
   				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Obecné CAD systémy</emphasis> představují vývojově starší metody návrhů a svou koncepcí připomínají klasické rýsovací prkno. Jde o nejvíce rozšířenou skupinu produktů. Jejich hlavní výhodou jsou vzájemně přenositelné formáty a jednoduché ovládání. Nově se již ovšem objevuje snaha implementovat do obecných <emphasis>CAD</emphasis> systémů moduly, které je rozšíří o objektově orientovaný přístup. Typickými aplikacemi této třídy jsou <emphasis>AutoCAD</emphasis> nebo <emphasis>Microstation</emphasis>.
					</simpara></listitem> 
					<listitem><simpara><emphasis role="bold">Objektově orientované CAD systémy</emphasis> naproti tomu nabízejí diametrálně odlišný přístup k návrhu. Mají své vlastní formáty a zpětná kompatibilita s obecnými <emphasis>CAD</emphasis> systémy je jen částečná. Je zde mnohem kvalitněji provázáno dvojrozměrné zobrazení s trojrozměrným. Jednotlivé prvky návrhu jsou reprezentovány objekty a jejich skládáním vzniká výsledný model. Do této kategorie patří především velice kvalitní <emphasis>AEC/CAD</emphasis> systémy <emphasis>ArchiCAD</emphasis> nebo <emphasis>ALLPLAN FT</emphasis>.
					</simpara></listitem>
				</itemizedlist>
   			</para>
   			</sect2>
   		<sect2 id="sec020202">
   			<title>AEC/CAD systémy</title>
   			<para>
   			Tato kapitola se věnuje kategorii <emphasis>CAD</emphasis> systémů, do které spadá i aplikace <emphasis>FloorPlanner</emphasis>. Jedná se o <emphasis>CAD</emphasis> aplikace pro projektování v oblasti architektury a stavebnictví, které využívají objektově orientovaného přístupu. <emphasis>AEC/CAD</emphasis> aplikace nabízejí širokou škálu objektů, které se pak navzájem kombinují do výsledného modelu. Příkladem může být aplikace <emphasis>ArchiCAD</emphasis>. Zde jsou objekty umístěny do hierarchických struktur. <emphasis>ArchiCAD</emphasis> má pro tyto struktury vlastní jazyk <emphasis>GDL</emphasis><footnote id="fn02020201"><para>Geometric Description Language je "BASIC-like" programovacím jazykem.</para></footnote>. Objekty uvnitř těchto struktur na sebe inteligentně reagují, čímž dochází například ke spojování zdí, k výřezům ve zdech pro okna či dveře. Zároveň je možné veškeré atributy objektů kdykoli měnit. Výsledný model se přizpůsobuje.
   			</para>
   			<para> 
Důležitou vlastností objektů jsou jejich nevektorové informace. Z nich lze totiž následně generovat výkazy či soupisy materiálů potřebných pro celou stavbu, nebo jen pro některou z jejich částí. Tímto lze stanovit předběžnou cenu projektu.
   			</para>
   		</sect2>
   	</sect1>
</chapter>

<chapter id="ch03">
	<title>Stávající aplikace pro návrh interiéru</title>
	<para>
	Vizualizací interiérů se dnes zabývá celá řada aplikací. Konkurence mezi výrobci vybavení pro interiéry je velká a představivost zákazníků malá. Proto se tito výrobci snaží poskytnout zákazníkům možnost vizualizace jejich představ. Konkrétně v oblasti plovoucích podlah jde většinou o webové aplikace, které pouze určitým způsobem pracují s fotografiemi místností.
	</para>
	<para>
Aplikace pro přesnější návrh podlah, ale i obkladů, se dnes běžně používají pouze pro&nbsp;keramické dlažby. Dovolují vytvářet přesné kladečské plány a odhadnout i náklady. Obdobné aplikace pro plovoucí podlahy prozatím buď neexistují, nebo nejsou volně přístupné.
	</para>
	<para>
Další možností je využít jedno ze sofistikovaných <emphasis>AEC/CAD</emphasis> řešení. Aplikace této kategorie poskytují nástroje pro návrh kompletních staveb, tedy i interiérů a jejich podlah. Lze je doplnit i nábytkem a ostatním vybavením a tím vytvořit reálnou kopii realizované místnosti. Tyto aplikace sice většinou obsahují nástroje pro generování výpisů materiálů, ovšem u podlah jde pouze o plochu místnosti a tak problém s množstvím prořezu zůstává nevyřešen. 
Následuje několik aplikací, které se vizualizací plovoucích podlah zabývají. Jsou zde jednoduché webové aplikace i komplexní objektově orientované <emphasis>AEC/CAD</emphasis> řešení.
	</para>
	<sect1 id="sec0301">
		<title>eShowroom</title>
		<para>
		Aplikace <emphasis>eShowroom</emphasis><footnote id="sec030101"><para><ulink url="http://www.europe.pergo.com/Consumer/Templates/eshowroom/CS_eshowroom.asp">Dostupná na adrese </ulink> (ověřeno k 6. lednu 2008).</para></footnote>, která byla vyvinuta pro švédskou společnost <emphasis>Pergo</emphasis>, patří právě do&nbsp;kategorie jednoduchých webových aplikací. Byla vyvinuta pro prezentaci kolekce plovoucích podlah <emphasis>Pergo</emphasis>. Uživatel má na výběr ze tří různých místností, přičemž má možnost měnit barvu zdí, některého z doplňků a samozřejmě vzor plovoucí podlahy. Tyto tři místnosti jsou pouze tři fotografie, na které jsou pomocí masky nanášeny různé vzory či&nbsp;barvy. Uživatel tak nijak nemůže přizpůsobit prostor ani pohled v prostoru. Přínosem však je možnost barevného sladění a hlavně zobrazení plovoucí podlahy v ploše, což dává uživateli rozhodně lepší představu než jeden samostatný vzorek. Aplikace dokonce disponuje jednoduchým kalkulátorem, který po zadání několika údajů o místnosti přibližně vypočítá potřebné množství balení podlah a doporučí i barevně sladěné lišty. Tento výpočet lze však považovat za správný jen v místnostech střední velikosti a navíc obdélníkového tvaru.
		</para>
		<para>
        <figure float="1" id="pic030101">
          	<title>Vizualizace plovoucí podlahy v aplikaci <emphasis>eShowroom</emphasis>.</title>
		  	<mediaobject><imageobject>
				<imagedata fileref="apl01" format="PNG"/>
			</imageobject></mediaobject>
		</figure>
		</para>
	</sect1>
	<sect1 id="sec0302">
		<title>Room Designer</title>
		<para>
		Pokročilejší webovou aplikací je bezesporu <emphasis>Room Designer</emphasis><footnote id="sec030201"><para><ulink url="http://www.parador.de/swf/raumdesigner/de.php">Dostupná na</ulink> (ověřeno k 6. lednu 2008).</para></footnote>, vyvinutý pro německou firmu <emphasis>Parador</emphasis>. Místo přednastavených fotografií totiž umožňuje vložit vlastní. Pomocí krátkého průvodce, během něhož jsou jednoduchými kliknutími označeny oblasti podlahy a zdí, je fotografie připravena. Pro uživatele je k dispozici kompletní kolekce firmy <emphasis>Parador</emphasis>. Korekci perspektivy je možné provést pomocí malého lichoběžníku uprostřed. Posuvníkem pro nastavení průhlednosti podlahy lze na novou podlahu přenést odlesky té původní. Kromě podlahy lze onačením stěn pozměnit i malbu na stěnách.
		</para>
		<para>
        <figure float="1" id="pic030201">
          	<title>Porovnání místností s původní podlahou a podlahou vytvořenou aplikací <emphasis>Room Designer</emphasis>.</title>
		  	<mediaobject><imageobject>
				<imagedata fileref="apl02" format="PNG"/>
			</imageobject></mediaobject>
		</figure>
		</para>
		<para>
Aplikace sice umožňuje zobrazit podlahu v zamýšleném prostoru, avšak zpracování podlah není příliš kvalitní. Při nastavení perspektivy je obraz deformován bez následného vyhlazení, a tak se vzor podlahy spíše ztrácí v šumu. Bohužel tato aplikace neumožňuje jakýmkoli způsobem stanovit náklady na realizaci.
		</para>
	</sect1>
	<sect1 id="sec0303">
		<title>ArchiCAD a ArchiTiler</title>
		<para>
		Aplikace <emphasis>ArchiCAD</emphasis> od společnosti <emphasis>Graphisoft</emphasis> je dnes jedním z nejpoužívanějších AEC/CAD systémů. Pro konstrukci budov využívá objektově orientovaného přístupu <emphasis>BIM</emphasis><footnote id="fn030301"><para>Building Information Modeling.</para></footnote>. V ArchiCADu se tato technologie používá pod názvem <emphasis>Virtuální budova</emphasis>. Celý model se sestává ze vzájemně propojeným konstrukčních prvků, jako jsou zdi, dveře, okna apod. Ty jsou pak v různých režimech zobrazení vykreslovány odpovídajícím způsobem. Díky tomu lze okamžitě zobrazovat reálný model v 3D, okótované výkresy ve 2D, ale i automaticky aktualizované tabulky s výkazy výměr a výpisy prvků. Součástí aplikace jsou rozsáhlé knihovny těchto prvků. Jsou popsány jednoduchým jazykem <emphasis>GDL</emphasis> a není tedy problém přidat prvky, které uživateli v knihovnách chybí. Výsledný projekt lze exportovat v mnoha formátech. Trojrozměrné vizualizace lze provádět renderingem přímo v aplikaci, nebo pomocí některého z externích rendererů. Pro vložení speciálních konstrukčních prvků lze využít jednoho z mnoha plug-inů.
		</para>
		<para>
        <figure float="1" id="pic030301">
          	<title>Kladečské plány dlažby v plug-inu <emphasis>ArchiTiler</emphasis> aplikace <emphasis>ArchiCAD</emphasis>.</title>
		  	<mediaobject><imageobject>
				<imagedata fileref="apl03" format="PNG"/>
			</imageobject></mediaobject>
		</figure>
		</para>
		<para>
Pro práci s plovoucími podlahami lze jednoduše použít texturu na prvek podlahy. Pro&nbsp;kalkulaci a reálnější vzhled lze použít propracovaného plug-inu <emphasis>ArchiTiles</emphasis> firmy <emphasis>Cigraph</emphasis>. Ten je primárně určen pro kladečské plány a kalkulaci pokládky dlaždic a dlažby. Změnou tvaru a textury však lze rozšířit použití i na plovoucí podlahy. Je možné nastavit posun mezi dílci v jednotlivých řadách, jenž však může být pouze konstantní a tak nelze docílit rustikálního stylu pokládky, kdy je dosaženo nižší spotřeby materiálu. Bohužel také vestavěný algoritmus nepočítá s použitím ořezaných dílů v dalších řadách. Jinak však <emphasis>ArchiTiles</emphasis> dokáže automaticky generovat výkazy materiálu včetně kalkulace prořezu.
		</para>	
		<para>
Toto řešení je nejlepší ze zde presentovaných aplikací pro vizualizaci a kalkulaci plovoucích podlah. Dovoluje použití i pro jiné typy podlah. Díky rozsáhlým knihovnám <emphasis>ArchiCADu</emphasis> lze interiér vylepšit dle svých představ. Fotorealistické zobrazení a kalkulace včetně výpočtu prořezu jsou dalšími z mnoha výhod. Je zde ale i několik záporů. Aplikace <emphasis>ArchiCAD</emphasis> je primárně určena pro návrh kompletních budov a komplexnosti aplikace odpovídá i její cena, která se při zakoupení jedné licence i s plug-inem <emphasis>ArchiTiles</emphasis> pohybuje kolem 140 000 Kč. To je však pro firmy, hledající pouze program pro vizualizaci podlah, příliš nákladná a těžko vratná investice. Další nevýhodou je komplikovanost <emphasis>ArchiCADu</emphasis>, čímž je tato aplikace pro nezkušeného uživatele v podstatě nepoužitelná.
		</para>
	</sect1>
</chapter>

<chapter id="ch04">
	<title>Použité algoritmy, metody a techniky</title>
	<para>
	V průběhu vývoje aplikace <emphasis>FloorPlanner</emphasis> bylo zapotřebí vyřešit několik úskalí. Nejzásadnější problémy a hlavně metody pro jejich řešení jsou obsahem právě této kapitoly. 
	</para>
	<sect1 id="sec0401">
		<title>Triangulace konkávních polygonů</title>
		<para>
		Triangulací se v počítačové grafice rozumí rozklad polygonu na trojúhelníky. Trojúhelníky se navzájem nesmějí překrývat a jejich sjednocení je rovno původnímu polygonu. Triangulací můžeme komplikované konkávní polygony rozdělit na jednoduché trojúhelníky, na&nbsp;nichž lze provádět některé operace, které bychom s původním polygonem nebyli schopni provádět. Trojúhelníky jsou totiž vždy rovinné, jednoduše se rasterizují a jsou jednoznačně interpolovatelné. 
		</para>
		<para>Triangulačních algoritmů je celá řada. Liší se časovou i paměťovou složitostí, komplikovaností implementace, ale i kvalitou podávaných výsledků. Některé vytvářejí aproximace rovnostranných trojúhelníků. Triangulace může také rozdělit polygon buď na trojúhelníky, které mají pouze vrcholy shodné s vrcholy původního polygonu, nebo na trojúhelníky s vrcholy kdekoli uvnitř nebo na okraji polygonu. V aplikaci <emphasis>FloorPlanner</emphasis> bude použita prvně zmiňovaná metoda, neboť je implementovatelná pomocí nástavbové knihovny <emphasis>GLU</emphasis> knihovny <emphasis>OpenGL</emphasis>.
		Právě v souvislosti s <emphasis>OpenGL</emphasis> je častěji používán obecnější pojem <emphasis>teselace</emphasis><footnote id="fn040101"><para>Z latinského <emphasis>tessella</emphasis> neboli kousek mozaiky.</para></footnote>, který označuje rozklad polygonu na lépe zpracovatelné struktury, většinou právě trojúhelníky. Prostorové objekty bývají děleny na čtyřstěny, nebo šestistěny.
		</para>
	</sect1>
	<sect1 id="sec0402">
		<title>Alias a jeho řešení</title>
		<para>
		</para>
		<sect2 id="sec040201">
			<title>Alias</title>
			<para><emphasis>Alias</emphasis> je jedním z nejčastějších a nejdiskutovanějších problémů v současné počítačové grafice. Jde o obecný pojem pro vadu vznikající podvzorkováním vstupního signálu. Dochází k němu při porušení <emphasis>Nyquistova kritéria</emphasis>, které říká, že vzorkovací frekvence musí být nejméně dvakrát větší, než je největší frekvence ve vstupních datech. Toho však často na&nbsp;monitorech s běžným rozlišením nelze dosáhnout. Podvzorkování pak způsobuje zobrazení vysokých frekvencí do frekvencí nižších, což vede ke vzniku nepříjemných rušivých elementů. V aplikaci <emphasis>FloorPlanner</emphasis> je však kladen důraz na kvalitní zobrazení textur. Zároveň je také většinou používán pohled, kdy je <emphasis>alias</emphasis> velice markantní a nežádoucí. Existuje několik projevů <emphasis>aliasu</emphasis>, z nichž dva jsou v počítačové grafice nejběžnější:
			</para>
			<para>
				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Jaggies</emphasis><footnote id="fn04020101"><para>Z anglického <emphasis>jagged edges</emphasis> neboli <quote>zubaté</quote> hrany.</para></footnote>&mdash; pojmem <emphasis>jaggies</emphasis> se obvykle označuje jev příliš ostrého a zubatého přechodu na okrajích polygonu. Vzniká rasterizací polygonu do konečně velkého rozlišení. Vzhledem k tomu, že většina dnešních scén, včetně scén v aplikaci <emphasis>FloorPlanner</emphasis>, je tvořena polygonálními modely a následně převedena do rastru, vypadají jejich okraje, zvláště v kritických úhlech, dosti nevzhledně.
					</simpara></listitem> 
					<listitem><simpara><emphasis role="bold">Moiré</emphasis><footnote id="fn04020102"><para>Podle tkaniny mající vzhled zčeřené vodní hladiny.</para></footnote> &mdash; při vzorkování textur s pravidelným vzorem může docházet k nepříjemnému efektu moiré, který se projevuje zobrazováním vzorku s vyšší frekvencí jako vzorku s frekvencí nižší. Vzorkování s vyšší vzorkovací frekvencí tento problém pouze odsune do frekvencí vyšších. V aplikaci <emphasis>FloorPlanner</emphasis> se textury s pravidelným vzorem asi příliš neobjeví. Avšak v případě vykreslení velkého počtu shodných polygonů vedle sebe se v místech, relativně hodně vzdálených od pozorovatele, tyto rušící artefakty běžně zobrazují.
					</simpara></listitem>
				</itemizedlist>
			</para>
			<para>
			Následující dvě části popisují metody, jak tyto dvě vady dostatečně eliminovat.
			</para>
		</sect2>
		<sect2 id="sec040202">
			<title>Antialiasing</title>
			<para><emphasis>Antialiasing</emphasis> je obecným pojmem pro odstraňování <emphasis>aliasu</emphasis>. Nejběžnější cestou je odstranění příliš vysokých frekvencí některým z vysokofrekvenčních filtrů. Tím však dojde k jistému rozostření obrazu. Možností je využít metodu <emphasis>Multisamplingu</emphasis>, která je implementována přímo v <emphasis>OpenGL API</emphasis>. Ta se hodí k odstranění zubatých hran a efekt moiré dokáže odsunout do vyšších frekvencí. Využívá při tom akumulační paměť. Obraz je tak vykreslen několikrát, přičemž se pohled po každém vykreslení změní o vzdálenost menší než jeden pixel. Výsledné obrazy jsou sečteny a zprůměrovány. Tato metoda je sice kvůli několikanásobnému vykreslování dosti náročná na výkon, avšak je jednoduché ji pomocí <emphasis>OpenGL</emphasis> implementovat a rovněž ji podporuje většina dnešních grafických karet.
			</para>
		</sect2>
		<sect2 id="sec040203">
			<title>Filtrování textur a mipmapping</title>
			<para>
			Velkým problémem je i vznik <emphasis>aliasu</emphasis> na texturách. V prostorových scénách totiž většinou jednomu pixelu neodpovídá právě jeden <emphasis>texel</emphasis><footnote id="fn03030301"><para><emphasis>Texel</emphasis> neboli <emphasis>texture element</emphasis> je, obdobně jako pixel u obrazu, základní jednotkou textury.</para></footnote>. Filtrování textur provede smíchání více texelů na jeden pixel. Bez použití filtrování je pixelu přiřazena barva jen jednoho texelu a tak při&nbsp;pohybu dochází k nepříjemnému mihotání a vzniku <emphasis>jaggies</emphasis>. Filtrování textur je výkonově levnější operací než použití <emphasis>antialiasingu</emphasis>. Pro další zrychlení lze zmenšení textury předpočítat. Slouží k tomu technika <emphasis>mipmappingu</emphasis>, která předem ke každé textuře vytvoří její zmenšené již filtrované verze. Takto je vytvořeno několik textur od původního rozlišení až po velikost jedna. Při následném mapování textury se dle úrovně detailů zvolí příslušná <emphasis>MIP map</emphasis> úroveň. <emphasis>OpenGL</emphasis> podporuje pouze textury o velikosti mocniny čísla 2. To ovšem znamená, že pro každou <emphasis>MIP map</emphasis> texturu je zapotřebí čtyřnásobek paměti oproti původní textuře. Náročnost na paměť je i přes částečné rozmazání textury vyvážena mnohem lepším zobrazením. Nespornou výhodou je také výše zmiňované ušetření výpočetního času. Není totiž zapotřebí při každém nanesení textury provádět filtrování na textuře s původním rozlišením.
			</para>
		</sect2>				
	</sect1>
	<sect1 id="sec0403">
		<title>Řádkové vyplňování se seznamem aktivních hran</title>
		<sect2 id="sec040301">
			<title>Specifikace požadavků</title>
			<para>
			Nejdůležitější částí aplikace bylo bezesporu najít a implementovat vhodný algoritmus pro vyplnění oblastí. Jeho modifikovaná podoba by byla následně použita při vyplňování místnosti ve tvaru libovolného polygonu dílci plovoucí podlahy ve tvarech libovolných obdélníků. Algoritmus musel splňovat následující podmínky:	
			</para>
			<para>
				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Nezávislost na typu polygonu</emphasis> &mdash; algoritmus by neměl rozlišovat, zda je vyplňovaný objekt polygonem konvexním či konkávním.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Geometricky určené hranice</emphasis> &mdash; základní podmínkou bylo také vybrat algoritmus, který vyplňuje oblast zadanou sérií propojených bodů.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Vyplňování v libovolném úhlu</emphasis> &mdash; je nezbytné, aby bylo možné provádět vyplňování v obecném úhlu, neboť v aplikaci bude většinou úhel vyplňování shodný s jednou z hran polygonu. 
					</simpara></listitem>
				</itemizedlist>
			</para>
			<para>
			Všechny tyto podmínky nejlépe splňuje algoritmus <emphasis>řádkového vyplňování se seznamem aktivních hran</emphasis>. Aby navíc fungoval v obecném úhlu, použijeme postup, jenž je podobný šrafování v obecném úhlu.<citation>mpg</citation>
			</para>
		</sect2>
		<sect2 id="sec040302">
			<title>Popis algoritmu</title>
			<para>
			Je nutné zavést celkem tři datové struktury. Základním datovým typem je <emphasis>hrana</emphasis>. O každé hraně se uchovávají tři atributy: souřadnice <emphasis>y</emphasis> koncového bodu, souřadnice <emphasis>x</emphasis> průsečíku s aktuálním řádkem a přírůstek <emphasis>x</emphasis> při přechodu na nový řádek. Někdy se místo souřadnice <emphasis>y</emphasis> koncového bodu používá počet zbývajících řádků. V aplikaci <emphasis>FloorPlanner</emphasis> však nebudou souřadnice <emphasis>y</emphasis> celočíselné hodnoty, a proto by kvůli nepřesnostem ve výpočtech mohlo docházet k chybám.
			</para>
			<para>
			Druhou datovou strukturou je <emphasis>tabulka hran</emphasis> obsahující na začátku všechny nevodorovné hrany polygonu. Vodorovné hrany jsou z výpočtu vyloučeny, neboť mají s řádkem nekonečně mnoho průsečíků a pro výpočet nejsou kvůli řádkovému stylu vyplňování důležité. Všechny hrany v tabulce hran jsou orientovány směrem dolů a jsou sestupně uspořádány podle souřadnice <emphasis>y</emphasis> počátečního bodu. 
			</para>
			<para>
			Poslední nutnou datovou strukturou je <emphasis>seznam aktivních hran</emphasis>. Při přechodu na nový řádek jsou všechny hrany s počátkem na aktuálním řádku přesunuty z tabulky hran do seznamu aktivních hran. Seznam se udržuje vzestupně seřazený podle aktuální souřadnice <emphasis>x</emphasis> každé z hran. V tomto okamžiku je možné vykreslit úseky mezi lichými a sudými hranami v seznamu. Před přechodem na nový řádek je u všech hran aktualizována hodnota souřadnice <emphasis>x</emphasis> průsečíku. Zároveň jsou hrany, mající souřadnici <emphasis>y</emphasis> koncového bodu shodnou se souřadnicí <emphasis>y</emphasis> aktuálního řádku, ze seznamu aktivních hran vyřazeny. 
			</para>
			<para>
			Algoritmus začíná naplněním a seřazením tabulky hran, přičemž je její první, a tím pádem i největší, souřadnice <emphasis>y</emphasis> použita pro nastavení aktuálního řádku. Přechody na nový řádek jsou poté opakovány, dokud se tabulka hran i seznam aktivních hran úplně nevyprázdní.
			</para>
		</sect2>
	</sect1>
</chapter>
<chapter id="ch05">
	<title>FloorPlanner</title>
	<para>
	Aplikace <emphasis>FloorPlanner</emphasis> vznikla jako stěžejní část této bakalářské práce. Řadí se do kategorie jednoduchých objektově orientovaných <emphasis>AEC/CAD</emphasis> aplikací. Byla primárně vytvořena pro&nbsp;vizualizaci a kalkulaci plovoucích podlah. I přes její současnou funkčnost a využitelnost v praxi je možný, a zároveň důležitý, její další vývoj. Cesty, kterými by se mohl vývoj ubírat, jsou naznačeny na konci této kapitoly. 
	</para>
	<sect1 id="sec0501">
		<title>Uživatelské prostředí</title>
		<para>
		Aplikace je navržena tak, aby uživatel mohl jednoduchými a intuitivními kroky vytvořit téměř libovolnou místnost. Do vytvořené místnosti pak <quote>položil</quote> jednu z nabízených podlah, poupravil pár parametrů pokládky a nakonec se prošel v hotové místnosti. Uživatelské prostředí se skládá ze dvou částí. V pravé části se nacházejí veškeré ovládací prvky. Levá část různými způsoby zobrazuje grafická data.
		</para>
		<para> 
Ovládací prvky byly vytvořeny platformově nezávislou knihovnou <emphasis>GLUI</emphasis>. Jsou rozděleny do několika rozvinovacích panelů. Pomocí panelu <emphasis>Wall editing</emphasis> lze přidávat, odebírat i editovat zdi. Panel <emphasis>Floor</emphasis> se stará o nastavení a zobrazení podlahy. Panel <emphasis>Windows/Doors editing</emphasis> vytváří a odstraňuje otvory ve zdech pro okna a dveře. V panelu <emphasis>Options</emphasis> se nalézají ostatní nastavení, například pro změnu světla či kvality zobrazení. Pravá část mimo jiné obsahuje i tlačítka pro volbu jednoho ze dvou módů. Změnou módu se mění způsob zobrazování grafických dat v levé části.
		</para>
		<para>
Dvojrozměrný mód zobrazuje ortografický náhled půdorysu místnosti a je ideální pro&nbsp;editaci. Je navržen jako nápodoba rýsovacího prkna. Pozadí tvoří pomocná mřížka, na níž se místnost jednoduše kreslí pomocí myši. Pro vytváření zdí pod úhlem 90° a jeho násobku je implementováno, pro tuto činnost standardní, kreslení se stisknutou klávesou <keycap>Shift</keycap>. Zobrazují se zde i okna s různými doplňkovými informacemi. Po dokončení místnosti a zobrazení podlahy je v tomto módu nejlépe vidět rozložení podlahových dílců.
		</para>
		<para>
Druhou možností je trojrozměrný mód plnící presentační a vizualizační úlohu. Pro pohyb je použit pohledový model první osoby. Veškeré zdi jsou viditelné jen z vnitřní strany místnosti. Díky tomu je podlaha interiéru vidět i v případě, že je pozorovatel vně místnosti. V pravé části okna aplikace je možné nastavit několik úrovní kvality zobrazení tohoto trojrozměrného módu včetně typu osvětlení.
		</para>
		<para>
			<figure float="1" id="pic050101">
	          	<title>Ukázka uživatelského prostředí aplikace FloorPlanner.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="fp01" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
		</para>
	</sect1>
	<sect1 id="sec0502">
		<title>Logická stavba programu</title>
		<para>
		Aplikace byla naprogramována v jazyce <emphasis>C++</emphasis>. Tento jazyk byl vybrán pro snadnou implementovatelnost <emphasis>OpenGL API</emphasis>. Pro vytvoření objektově orientované <emphasis>AEC/CAD</emphasis> aplikace byl i v programování ve většině případů použit objektově orientovaný přístup. 
Hlavní třídou aplikace je třída <emphasis>Room</emphasis> obsahující veškerá grafická data o místnosti. Tato třída proto disponuje kontejnerem s instancemi třídy <emphasis>Wall</emphasis> pro zdi místnosti, instanci třídy <emphasis>Floor</emphasis> pro podlahu a instanci třídy <emphasis>Light</emphasis> pro osvětlení. Zároveň se stará o vzájemnou interakci komponent místnosti. Třída <emphasis>Wall</emphasis>, kromě grafických dat o samotné zdi, obsahuje také kontejner s instancemi třídy <emphasis>Windows</emphasis> pro výřezy ve zdech. Ke kalkulaci materiálu slouží třída <emphasis>MaterialCalculation</emphasis>. Uvnitř dochází také k výpočtu grafických dat podlahových dílců pro místnosti typu <emphasis>Room</emphasis>.
Kromě toho jsou součástí aplikace i další dvě důležité třídy mající na starost zobrazení scény a uživatelské vstupy. Třída <emphasis>Viewport2D</emphasis> je určena pro vykreslování dat ve dvojrozměrném módu. Ošetřuje vstupy z klávesnice i myši. Vykresluje mřížku pro informace o právě vykonávané činnosti a hlavně půdorysná data instancí tříd <emphasis>Room</emphasis> a <emphasis>MaterialCalculation</emphasis>. V případě výběru nějaké akce či výskytu chyby zobrazí podrobnější informace. Naproti tomu jsou třídou <emphasis>Viewport3D</emphasis> zobrazována trojrozměrná data.
		</para>
	</sect1>
	<sect1 id="sec0503">
		<title>Implementované knihovny</title>
		<para>
		</para>
		<sect2 id="sec050301">
			<title>OpenGL</title>
			<para> 
<emphasis>OpenGL</emphasis> (Open Graphics Library) je víceplatformní rozhraní pro tvorbu především trojrozměrné grafiky, jež je renderována v reálném čase. I když je <emphasis>OpenGL</emphasis> nejčastěji interpretováno jazyky <emphasis>C</emphasis>, nebo <emphasis>C++</emphasis>, existují implementace knihovny pro většinu běžných programovacích jazyků. Stejně tak je implementováno na většině dnešních platforem. Pokud ne hardwarově, tak alespoň pomocí některé ze softwarových implementací. 
Vzniklo roku 1992 pod záštitou konsorcia <emphasis>OpenGL ARB</emphasis><footnote id="fn05030101"><para>OpenGL Architecture Review Board byla skupina společností s cílem vytvořit jednotné společné API.</para></footnote>. Od té doby vzniklo již sedm revizí, z nichž poslední verze je <emphasis>OpenGL 2.1</emphasis>. Pomocí asi 250 příkazů pro nastavení a definici objektů a scény lze vytvářet široké spektrum grafických aplikací. Veškeré objekty jsou vykreslovány pomocí základních primitiv, jako jsou body, úsečky, trojúhelníky či polygony. <emphasis>OpenGL</emphasis> se chová jako stavový automat. Poskytuje proto celou řadu příkazů pro nastavení stavových proměnných, které definují vlastnosti, jež jsou na objekty aplikovány během zpracování v <emphasis>OpenGL pipeline</emphasis><footnote id="fn05030102"><para>Posloupnost vykonávaných operací při zpracování grafických dat v OpenGL.</para></footnote>.
			</para>
		</sect2>
		<sect2 id="sec050302">
			<title>GLU</title>
			<para>Knihovna utilit <emphasis>GLU</emphasis> (OpenGL Utility Library) je jednou z nástavbových knihoven <emphasis>OpenGL</emphasis>. Je standardně obsažena v každé implementaci <emphasis>OpenGL</emphasis>. Obsahuje sadu příkazů pro zjednodušení programování některých procedur oproti klasickému <emphasis>OpenGL</emphasis>. Nabízí například nástroje pro teselaci polygonů, generování MIP map, tvorbu NURBS křivek a ploch nebo jednodušší nastavení pohledové matice. Přidává taky některá nová primitiva, tzv. kvadriky, pro tvorbu koulí, válců a disků.
			</para>
		</sect2>
		<sect2 id="sec050303">
			<title>GLUT</title>
			<para>
<emphasis>GLUT</emphasis> (OpenGL Utility Toolkit) je další sadou nástrojů pro rozšíření <emphasis>OpenGL API</emphasis>. Tyto jsou však zaměřeny zejména na jednoduché vstupně/výstupní operace s operačním systémem, které by byly bez použití této knihovny komplikované. Původně byl vytvořen pro <emphasis>X Window</emphasis> systémy. Později byl přenesen i na platformy <emphasis>Windows</emphasis> a <emphasis>Mac</emphasis>. Umožňuje jednoduchou tvorbu a ovládání oken, zpětná volání při vstupech z klávesnice, myši i jiných zařízení a také tvorbu devíti trojrozměrných primitiv. Přináší i jednoduchou možnost tvorby <emphasis>GUI</emphasis><footnote id="fn05030301"><para>Graphical User Interface neboli grafické uživatelské rozhraní.</para></footnote>, které je však omezeno jen na vyskakovací menu.
			</para>
		</sect2>
		<sect2 id="sec050304">
			<title>GLUI</title>
			<para>
Rozšiřující, i když ne zcela plnohodnotné řešení tvorby grafického uživatelského rozhraní, nabízí knihovna GLUI (OpenGL User Interface Library). Jde o nadstavbu knihovny <emphasis>GLUT</emphasis>. Tato víceplatformní knihovna nabízí několik základních prvků pro tvorbu jednoduchého <emphasis>GUI</emphasis>. Do prvků, jako jsou rozvinovací či klasické panely, lze umístit obyčejná nebo zaškrtávací tlačítka, tlačítka předvolby, textová pole nebo třeba obyčejné oddělovače. Složitější prvky pro tvorbu pokročilých grafických rozhraní bohužel chybí. Dostatečným plusem je ovšem jednoduchost a z toho i částečně vyplývající rychlost. Škála ovládacích prvků je pro&nbsp;aplikaci <emphasis>FloorPlanner</emphasis> postačující. 
			</para>
		</sect2>
		<sect2 id="sec050305">
			<title>Texture Loader</title>
			<para>
<emphasis>Texture Loader</emphasis> v současné verzi 1.4 je knihovna vytvořená <emphasis>Chrisem Leathley</emphasis> pro zjednodušené použití textur ve <emphasis>Win32 OpenGL</emphasis> aplikacích. Jedná se o velmi jednoduchý, ale přesto silný nástroj pro nahrání, uložení i použití textur v <emphasis>OpenGL</emphasis> aplikacích. Podporuje textury v <emphasis>BMP</emphasis>, <emphasis>GIF</emphasis>, <emphasis>JPG</emphasis> i <emphasis>TGA</emphasis> formátu, které může nahrát z disku, RAM nebo Internetu. Následně se dají zobrazit za použití bilineárního, nebo trilineárního filtrování. Podporuje generování MIP map a textur s polovičním rozlišením pro systémy se staršími grafickými kartami. 
			</para>
		</sect2>
	</sect1>
	<sect1 id="sec0504">
		<title>Vhodná rozšíření aplikace</title>
		<para>
		Aplikace se nyní nachází ve funkční stádiu. Je plně použitelná v praxi. Možností pro rozšíření aplikace je však stále hodně. Vývoj aplikace bude tedy i nadále pokračovat. Následuje výčet několika vlastností, které by se mohly v budoucnu stát součástí aplikace <emphasis>FloorPlanner</emphasis>.
		</para>
		<para>
			<itemizedlist mark="opencircle">
				<listitem><simpara>Import nových vzorů pro aktualizaci seznamu podlah včetně jejich textur a velikosti.
				</simpara></listitem>
				<listitem><simpara>Pokročilé GUI se zobrazením hierarchické struktury objektů a náhledy podlah.
				</simpara></listitem>
				<listitem><simpara>Rozšíření o algoritmicky jednodušeji implementovatelné druhy podlah jako jsou koberce, linolea, podlahové čtverce nebo různé druhy podkladových materiálů.
				</simpara></listitem>
				<listitem><simpara>Možnost uložení nebo nahrání projektu, stejně jako import do některého z běžně používaných formátů. 
				</simpara></listitem>
				<listitem><simpara>Import GDL objektů.
				</simpara></listitem>
				<listitem><simpara>Některé pokročilejší světelné efekty jako jsou odrazy nebo stíny.
				</simpara></listitem>
				<listitem><simpara>Vizualizace mozaikovitého vyskládávání podlah.
				</simpara></listitem>
				<listitem><simpara>Kompletní výpis všech materiálů formátovaný pro tisk.
				</simpara></listitem>
			</itemizedlist>
		</para>
	</sect1>
</chapter>
<chapter id="ch06">
	<title>Implementace algoritmů v aplikaci FloorPlanner</title>
	<para>
	
	</para>
	<sect1 id="sec0601">
		<title>Řazení zdí v místnosti</title>
		<para>
		Tvorba místností je v aplikaci <emphasis>FloorPlanner</emphasis> realizována postupným kreslením a editací zdí v dvojrozměrném módu. Aby mohlo být v aplikaci jednoduše implementováno mizení zdí, které by bránily pohledu uživatele do místnosti, musí být všechny zdi orientované stejným směrem. Mizení lze pak jednoduše zajistit odstřelem předních či zadních stran polygonů. Pro pozdější zpracování, jako je teselace nebo vyplnění podlahovými dílci, je také nutné, aby na sebe jednotlivé zdi navazovaly a tvořily polygon bez vzájemného křížení hran. 
		</para>
		<para>Spojování i otáčení zdí je implementováno ve třídě <envar>Room</envar>. Ta má jako svůj atribut kontejner <envar>walls</envar> obsahující všechny zdi třídy <envar>Wall</envar> a dvojrozměrné pole <envar>vertices</envar>. Toto pole obsahuje setříděné souřadnice shodně orientovaných zdí kontejneru <envar>walls</envar>. 
		</para>
		<para>
		<programlisting><![CDATA[
class Room
{
private:
	GLfloat** vertices;    /*setridene pole s]]>&nbsp;<![CDATA[krajnimi body zdi vectoru 
	                         walls*/
	vector<Wall> walls;    /*kontejner setridenych zdi*/
	...
	...
public:
	void addWall(Wall &wall);        /*pridani nove zdi zadane parametrem*/
	void removeWall(GLuint id);      /*odstraneni zdi*/
	void rotateWall(GLuint id);      /*otaceni zdi*/
	void editWallPosition(GLuint id, /*uprava souradnic krajnich bodu zdi*/
		GLuint index, GLfloat value);
		
	GLfloat *nearPoint(GLfloat *point); /*pokud najde ve vertices bod
	                                      blizky point, vrati jej*/
 	...
 	...
}; 
		]]></programlisting>
		</para>
		<para>Samotná třída <envar>Wall</envar> obsahuje jako své atributy dvě souřadnice dvou krajních bodů zdi. Dalším atributem důležitým pro třídění je pole <envar>vertices2d</envar>, obsahující souřadnice dvou bodů. Ty jsou použity ve dvojrozměrném módu, kdy je zeď vykreslena jako čtyřúhelník. Souřadnice jsou při každé změně u vrcholu přepočítány.
		</para>
		<para>
		<programlisting><![CDATA[
class Wall 
{
private:
	GLfloat position[4];    /*krajni body zdi*/
	GLfloat vertices2d[4];  /*dva body pro 2D zobrazeni zdi jako 
	                          ctyruhelniku*/
	...
	...
public:
	void switchPoints();    /*otoci zed o]]>&nbsp;<![CDATA[180° kolem sveho stredu*/
	...
	...
};
]]></programlisting>
		</para>
		<sect2 id="sec060101">
			<title>Vkládání nových zdí</title>
			<para>
Vkládání a následné řazení je prováděno v několika krocích. Nejprve třída <envar>Viewport2D</envar>, starající se o projekci a uživatelské vstupy dvojrozměrného módu, zpracuje vstup uživatele, jenž kreslí novou zeď. Pomocí metody <envar>nearPoint()</envar> je zjištěno, zda v blízkosti uživatelem zadaných bodů již neleží jiný bod. V případě nálezu je uživatelem zadaný bod posunut do&nbsp;nalezeného bodu a zdi jsou napojeny.
			</para>
			<para>
Při každé takto vložené zdi je pole <envar>vertices</envar> i odpovídající zdi v kontejneru <envar>walls</envar> setříděno. To probíhá ve třech krocích pomocí tří metod třídy <envar>Room</envar>. Přidání zdi se realizuje voláním metody <envar>addWall()</envar> s parametrem vkládané zdi. Prohledáním pole <envar>vertices</envar> je následně zjištěno, zda již existuje zeď, která by se dala s nově vkládanou zdí propojit. Pokud není propojení nalezeno, je nová zeď vložena na konec pole <envar>vertices</envar> i kontejneru <envar>walls</envar>. V opačném případě je volána metoda <envar>findSecondConnection()</envar>. Zatímco metoda <envar>addWall()</envar> zjistí pouze jedno propojení, metoda <envar>findSecondConnection()</envar> zkoumá, zda nelze propojit i druhý konec nově vkládané zdi. Pokud tento konec není nijak propojen, dojde nejprve v případě rozdílné orientace původní a nové zdi k otočení nové zdi metodou <envar>rotateWall()</envar>. Následně je pak nová zeď vložena jak do pole <envar>vertices</envar>, tak i do kontejneru <envar>walls</envar> před, resp. za zeď nalezenou v metodě <envar>addWall()</envar>. Je tak vytvořen <emphasis>díl propojených zdí</emphasis>. Příklad je zobrazen na obrázku 6.1. 
			</para>
			<para>
	        <figure float="1" id="pic06010101">
	          	<title>Aplikace seřazení pole <envar>vertices</envar> v metodě <envar>findSecondConnection()</envar>.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="01" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
			</para>
			<para>
Metoda <envar>findSecondConnection()</envar> také ošetřuje uzavření polygonu místnosti poslední zdí. Testování uzavřenosti kontroluje, zda je celé pole tvořeno jedním <emphasis>dílem propojených zdí</emphasis> a zda se poslední bod rovná prvnímu. Tímto testováním je zamezeno provádění teselace a kalkulace v místnostech s otvorem nebo sloupem uvnitř. Poslední metodou třídy <envar>Room</envar> pro řazení hran je <envar>sortWalls()</envar>. Ta je volána v metodě <envar>findSecondConnection()</envar> při nalezení shody nepropojeného bodu vkládané zdi s některým bodem z pole <envar>vertices</envar>. Metoda <envar>sortWalls()</envar> zabezpečí případné otočení zdí a setřídění. Otáčení zdí je zde o něco složitější. Pokud mají zdi, jež mají být s vkládanou zdí propojeny, opačnou orientaci, je třeba jednu z nich otočit. Výslednou orientaci v tomto případě určuje nově vkládaná zeď. Otáčí se však nejen zeď přímo spojená s vkládanou zdí, ale celý <emphasis>díl propojených zdí</emphasis>. To znamená, že všechny zdi v tomto dílu musí být otočeny a přeskládány v opačném pořadí. Pole <envar>vertices</envar> je pak setříděno následovně: Nejdříve jsou vloženy všechny zdi nově vzniklého <emphasis>dílu propojených zdí</emphasis> ve správném pořadí i se správnou orientací. Pak následují všechny ostatní zdi ve stejném pořadí, jako byly uloženy v poli <envar>vertices</envar> před setříděním. Příklad třídění v metodě <envar>sortWalls()</envar> je znázorněn na obrázku 6.2.
			</para>
			<para>
	        <figure float="1" id="pic06010102">
	          	<title>Aplikace seřazení pole <envar>vertices</envar> v metodě <envar>sortWalls()</envar>.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="02" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
			</para>
		</sect2>
		<sect2 id="sec060102">
			<title>Ostatní operace se zdmi</title>
			<para>
			Kromě vkládání zdí jsou v aplikaci FloorPlanner implementovány i jiné operaci se zdmi. Seřadění navazujích zdí musí být zachováno. V následujících řádcích jsou popsány a vysvětleny záludnosti, na které musel být při implementaci těchto jednotlivých operací brán zřetel.
			</para>
			<para>
				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Odstraňování zdi</emphasis> představuje operaci zmenšení kontejneru walls a pole vertices o právě označenou zeď. Důležité je ošetřit případ, kdy je zeď uvnitř uzavřené smyčky. V tomto případě je nutné celou tuto smyčku přeuspořádat. Při každém odstranění zdi je nutné provést kontrolu uzavřenosti polygonu.
					</simpara></listitem>
					<listitem><simpara>Při <emphasis role="bold">převrácení zdi</emphasis> je nutné otočit i všechny navazující zdi. Ty jsou následně uspořádány v opačném pořadí.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Editace krajních bodů zdi</emphasis> upráví vždy jednu ze souřadnic zdi. Spolu s ní je třeba upravit i souřadnici zdi, která v tomto bodě navazuje.
					</simpara></listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
	<sect1 id="sec0602">
		<title>Výběr objektu</title>
		<para>
		<emphasis>OpenGL</emphasis> nabízí kromě módu pro vykreslení objektů na obrazovku i jiné módy. Díky nim lze provádět výběr objektů nebo používat zpětnou vazbu. V aplikaci <emphasis>FloorPlanner</emphasis> se objekty nejen vykreslují, ale je s nimi i manipulováno. Pro tento účel nabízí <emphasis>OpenGL</emphasis> sadu funkcí a procedur. Ty jsou však navrženy především pro použití v trojrozměrné scéně. Vzhledem k tomu, že výběr probíhá v aplikaci <emphasis>FloorPlanner</emphasis> ve dvojrozměrné ortografické projekci, bylo by použití tohoto aparátu zbytečně složité.
Namísto něj lze použít speciální vykreslení do nepoužívaného <emphasis>color-bufferu</emphasis>. Objekty jsou jednotlivě vykresleny unikátní barvou. Následně jsou z <emphasis>color-bufferu</emphasis> čtena pixelová data, jež jednoznačně identifikují vybíraný objekt. Tento postup lze využít pouze pro výběr objektů, které jsou nejblíže pozorovateli. Zároveň je tento algoritmus nevhodný pro scény s příliš velkým počtem objektů. Pro použití v aplikaci <emphasis>FloorPlanner</emphasis> je ovšem ideální.
		</para>
		<sect2 id="sec060201">
			<title>Datové struktury</title>
			<para>
			V této části jsou popsány datové struktury potřebné pro výběr objektů. Celý proces výběru je realizován instancí třídy <envar>Viewport2D</envar>. 
			</para>
			<para>
			<programlisting><![CDATA[
Viewport2D vp2d;  /*instance pro dvojrozměrný mód*/
Room room;        /*instance representující místnost*/
			]]></programlisting>
			</para>
			<para>
			Každému objektu scény přidělí <envar>vp2d</envar> pomocí třídy <envar>Identifier</envar> unikátní identifikátor.
			</para>
			<para>
			<programlisting><![CDATA[
class Identifier
{
private:
	GLuint current;
public:
	Identifier(void):current(1){};
	GLuint generate() { return current++; };
};
			]]></programlisting>
			</para>
			<para>
			Každý objekt si uchovává svůj identifikátor. Zároveň jsou všechny identifikátory uloženy v asociativním kontejneru spolu s údajem o typu objektu.
			</para>
			<para>
			<programlisting><![CDATA[
map<unsigned int, unsigned short> identifiers_of_objects;
			]]></programlisting>
			</para>
		</sect2>
		<sect2 id="sec060202">
			<title>Implementace výběru objektu</title>
			<para>
			Kliknutím myši do prostoru rýsovacího plátna bez vybrané akce je v třídě <envar>Viewport2D</envar> aktivován mód výběru. Souřadnice kliknutí jsou uloženy. Následně je celá scéna vykreslena do zadního bufferu. 
			</para>
			<para>
			Nejprve je nutné vyčistit <emphasis>color-buffer</emphasis> černou barvou a vypnout výpočet osvětlení.
			</para>
			<para><programlisting><![CDATA[
glClearColor(0.0, 0.0, 0.0, 0.0);  /*nastaveni barvy color-bufferu na
                                     cernou*/
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glDisable(GL_LIGHTING);            /*vypnuti osvetleni*/
			]]></programlisting></para>
			<para>
Projekční matice je nastavena shodně jako v případě klasického vykreslení scény ve dvojrozměrném režimu.
			</para>
			<para><programlisting><![CDATA[
glMatrixMode(GL_PROJECTION); /*mod projekcni matice*/
vp2d.projection();           /*nastaveni projekce*/
glMatrixMode(GL_MODELVIEW);  /*mod modelovaci matice*/
glLoadIdentity();            /*nahrani jednotkove matice*/
			]]></programlisting></para>
			<para>
Následuje vykreslení celé scény v módu výběru. Identifikátor každého objektu je symetricky převeden na barvu tak, aby každá barva jednoznačně určovala jeden objekt scény. Jednotlivé objekty jsou pak touto barvou vykresleny. 
			</para>
			<para><programlisting><![CDATA[
room.displaySelection();     /*zobrazeni objektu specialne pro vyber*/
			]]></programlisting></para>
			<para>
Před čtením pixelových dat je zapotřebí dokončit všechny operace prováděné <emphasis>OpenGL</emphasis>. To lze vynutit funkcí <envar>glFlush()</envar>.
			</para>
			<para><programlisting><![CDATA[
glFlush();                   /*vynucene dokonceni vsech OpenGL operaci*/
			]]></programlisting></para>
			<para>
Metoda <envar>selectObject()</envar> se postará o výběr objektu v místnosti zadané parametrem. Vzhledem k většímu množství operací je tato metoda rozepsána níže.
			</para>
			<para><programlisting><![CDATA[
vp2d.selectObject(&room);    /*cteni pixelovych dat a vyber objektu*/
			]]></programlisting></para>
			<para>
Díky absenci volání funkce <envar>glutSwapBuffers()</envar> se celá procedura nezobrazí na obrazovce.
			</para>
			<para>
V metodě <envar>selectObject()</envar> jsou použity dříve uložené souřadnice kliknutí. V kódu jsou reprezentovány polem <envar>mouse_click[]</envar>. 
Pro uložení vlastností pixelu, na který bylo kliknuto, poslouží ukazatel <envar>*pixel</envar>. 
			</para>
			<para><programlisting><![CDATA[
GLubyte *pixel = new GLubyte[3];
			]]></programlisting></para>
			<para>
Funkce <envar>glReadBuffer()</envar> nastaví zadní buffer pomocí parametru <envar>GL_BACK</envar> pro čtení.
			</para>
			<para><programlisting><![CDATA[
glReadBuffer(GL_BACK);
			]]></programlisting></para>
			<para>
Pro čtení pixelových dat z frame bufferu slouží funkce <envar>glReadPixels()</envar>. V tomto případě je čten pouze jeden pixel, a to ten, na nějž bylo kliknuto. Jeho barva je uložena do pole daného ukazatelem <envar>*pixel</envar>. Použitím konstant <envar>GL_RGB</envar> a <envar>GL_UNSIGNED_BYTE</envar> je červená, zelená i modrá složka barvy uložena jako osmibitové číslo bez znaménka.
			</para>
			<para><programlisting><![CDATA[
glReadPixels(
    mouse_click[0],window[1]-mouse_click[1], /*souradnice ctene oblasti*/
    1,1,                      /*velikost ctene oblasti*/
    GL_RGB, GL_UNSIGNED_BYTE, /*parametry ulozeni oblasti*/
    pixel);               /*ukazatel na pole pro ulozeni pixelovych dat*/
			]]></programlisting></para>
			<para>
Barvu lze nyní jednoduše pomocí bitových posunů a bitového součtu zpětně převést na&nbsp;identifikátor.
			</para>
			<para><programlisting><![CDATA[
GLuint r,g,id;
r = pixel[0] << 16;
g = pixel[1] << 8;
id = pixel[2];
id = r | g | id;
			]]></programlisting></para>
			<para>
Nakonec je z asociativního pole <envar>identifiers_of_objects</envar> získána informace o typu objektu s tímto identifikátorem. Objekt je vyhledán v instanci třídy <envar>Room</envar>, označen a připraven pro editaci a jiné operace.
			</para>
		</sect2>
	</sect1>
	<sect1 id="sec0603">
		<title>Antialiasing</title>
		<para>Vykreslování scén bez použití nějaké formy vyhlazení vytváří nepříjemné artefakty a příliš ostré a zubaté přechody (<emphasis>jaggies</emphasis>). <emphasis>OpenGL</emphasis> nabízí relativně kvalitní nástroje pro vyhlazování bodů, úseček, polygonů i celé scény.
		</para>
		<sect2 id="sec060301">
			<title>Vyhlazování úseček</title>
			<para>
Dvojrozměrný režim aplikace <emphasis>FloorPlanner</emphasis> vykresluje pouze úsečky a polygony bez použití textur či osvětlení. Okraje polygonů jsou zde vždy obtaženy úsečkami, tudíž <quote>zubatost</quote> polygonů není potřeba řešit. Úsečky však často trpí dosti viditelným <emphasis>aliasem</emphasis>, a proto je na&nbsp;ně použit jednoduchý antialiasing úseček v <emphasis>OpenGL</emphasis>. 
			</para>
			<para>
Nejprve je nutné pomocí funkce <envar>glEnable()</envar> povolit vyhlazování úseček a míchání barev.
			</para>
			<para><programlisting><![CDATA[
glEnable(GL_LINE_SMOOTH);
glEnable(GL_BLEND);
			]]></programlisting></para>
			<para>
Poté jsou nastaveny faktory míchání barev.
			</para>
			<para><programlisting><![CDATA[
glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
			]]></programlisting></para>
			<para>
Posledním nastavením je funkce <envar>glHint()</envar>. Ta nastaví <emphasis>OpenGL</emphasis> tak, že pokud to bude implementací povoleno, použije pro vyhlazování nejkvalitnější metodu.
			</para>
		</sect2>
		<sect2 id="sec060302">
			<title>Vyhlazování scény</title>
			<para>
			<emphasis>OpenGL</emphasis> využívá pro vyhlazování celé scény metodu <emphasis>multisamplingu</emphasis><citation>OpenGL</citation>. Celá scéna je několikrát vykreslena s minimálním posunem do akumulačního bufferu, kde je smíchána. Pro pohyb scény (tzv.<emphasis>jittering</emphasis>) jsou použity fukce <envar>accFrustum()</envar> a <envar>accPerspective()</envar>.
			</para>
			<para>
Následující pseudokód popisuje akumulaci do akumulačního bufferu: 
			</para>
			<para><programlisting><![CDATA[
vyčisti akumulační buffer;
for( i = 0; i < n; i++)
{
vyčisti color-buffer a buffer hloubky;
nastav perspektivu za použití jitter[i];
vykresli scénu;
přidej color-buffer do akumulačního bufferu; 
}
zkopíruj akumulační buffer do color-bufferu;
			]]></programlisting></para>
			<para>
Před samotnou akumulací je nutné vyčistit akumulační buffer pomocí funkce <envar>glClear()</envar>.
			</para>
			<para>
Proměnná <envar>n</envar> udává počet akumulací. Její hodnota razantně ovlivňuje dobu vykreslování, ale i výslednou kvalitu. V programu <emphasis>FloorPlanner</emphasis> lze její hodnotu nastavit optimálně dle&nbsp;rychlosti právě používaného hardwaru. 
			</para>
			<para>
Akumulace probíhá vykreslováním do <emphasis>color-bufferu</emphasis>, jehož obsah je následně zkopírován do akumulačního bufferu. Proto je nutné při každém cyklu vyčistit jak <emphasis>color-buffer</emphasis>, tak <emphasis>buffer hloubky</emphasis>.
			</para>
			<para>
Pro nastavení perspektivy se používá funkce <envar>accPerspective()</envar>, která je upravenou verzí funkce <envar>gluPerspective()</envar>. Oproti původní funkci má dva nové parametry pro posunutí scény. Hodnoty posunutí jsou uloženy v poli <envar>jitter[n]</envar>. Optimální hodnoty pro co nejlepší výsledky jsou použity z <citation>OpenGL</citation>.
			</para>
			<para>
Následně jsou běžným způsobem vykresleny všechny objekty scény do <emphasis>collor-bufferu</emphasis>. V aplikaci <emphasis>FloorPlanner</emphasis> to znamená, že na instance třídy <envar>Room</envar> a <envar>MaterialCalculation</envar> je volána metoda <envar>displayGL()</envar>.
			</para>
			<para>
Aniž by byl <emphasis>color-buffer</emphasis> zobrazen, je jeho obsah pomocí funkce <envar>glAccum()</envar> s parametrem <envar>GL_ACCUM</envar> zkopírován do akumulačního bufferu.
			</para>
			<para>
Po skončení akumulačního cyklu jsou příkazem <envar>glAccum()</envar> s parametrem <envar>GL_RETURN</envar> akumulovaná data jednoduše zkopírována zpět do <emphasis>color-bufferu</emphasis> a zobrazena.
			</para>
		</sect2>
	</sect1>
	<sect1 id="sec0604">
		<title>Teselace</title>
		<para>
		Samotné <emphasis>OpenGL</emphasis> dokáže zobrazit pouze základní primitiva, jako jsou body, úsečky, trojúhelníky a konvexní polygony. Kvůli optimalizaci světelného modelu tak nezvládá korektně zobrazit konkávní polygony, tedy polygony mající nejméně jeden vnitřní úhel větší než <emphasis>π</emphasis>. Takovýto případ však může v aplikaci <emphasis>FloorPlanner</emphasis> u podlahy i stropu běžně nastat, a&nbsp;proto je nutné provést teselaci a získat rozdělením jednoho konkávního polygonu několik, již konvexních, trojúhelníků. Nadstavbová knihovna <emphasis>GLU</emphasis> pro tento účel nabízí sadu procedur a&nbsp;funkcí.
		</para>
		<para>
		Grafická data podlahy i stropu jsou uložena v zobrazovacích seznamech uvnitř instance třídy <envar>Floor</envar>. Její metoda <envar>tessellate()</envar> získá vrcholy polygonu z pole <envar>vertices</envar> instance třídy <envar>Room</envar>.
		Pro teselaci je nutné provést několik kroků. Prvním z nich je definovat sadu funkcí zpětného volání. Jednotlivě jsou pak volány při vzniku určitých událostí během vykonávání algoritmu. Kromě jednoduchých volání pro začátek a konec vykreslování, je zde také volání pro definici chování vrcholů s nastavením normál. Posledním a nejdůležitějším voláním je ošetření chyb při teselaci. Toto volání speciálně reaguje na chybu křížení dvou stěn. Tímto je ošetřen tento chybný uživatelský vstup.
		</para>
		<para>
		Teselace je podmíňena vytvořením teselačního objektu. Na něj jsou navázána výše zmiňovaná zpětná volání. <emphasis>GLU</emphasis> umožňuje vykreslování polygonu s několika samostatnými částmi. Tato vlastnost je však vyloučena <link linkend="sec0501">algoritmem řazení zdí</link>. Algoritmu jsou tedy předány body získané z pole <envar>vertices</envar> a ten je zpracuje jako jeden uzavřený celek. Celý proces je ukládán do zobrazovacích seznamu, který je následně vykreslen poprvé jako podlaha a podruhé posunutě a převráceně podle roviny <emphasis>xy</emphasis> jako strop místnosti. 
		</para>
	</sect1>
	<sect1 id="sec0605">
		<title>Vyplnění polygonu</title>
		<para>Stěžejním úkolem práce bylo implementovat korektní algoritmus pro kalkulaci a vizualizaci plovoucích podlah v interiéru. Pro tento účel bylo jako nejideálnější vyhodnoceno <emphasis>řádkové vyplňování se seznamem aktivních hran</emphasis>. Aspekty vedoucí k výběru a podrobnější popis tohoto algoritmu je obsahem <link linkend="sec0403">kapitoly 4.3</link>.
		</para>
		<para>
Algoritmus byl ovšem podstatně upraven. Níže je vypsán výčet vlastností, které jsou pro&nbsp;použití v aplikaci <emphasis>FloorPlanner</emphasis> nedostatečné nebo nevhodné a musely být upraveny.
		</para>
		<para>
			<itemizedlist mark="opencircle">
				<listitem><simpara><emphasis role="bold">Pravidelný rastr</emphasis> &mdash; algoritmus je vytvořen pro vyplňování pravidelného rastru. Řádek je tedy vždy určen celým číslem. V aplikaci <emphasis>FloorPlanner</emphasis> se však vyplňuje podlahovými dílci o neceločíselné šířce, resp. výšce. Posun na nový řádek tedy neprobíhá snížením souřadnice <emphasis>y</emphasis> o jedničku, ale o šířku dílce.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Nepřesné vyplnění polygonu</emphasis> &mdash; při vyplnění polygonu původním algoritmem nemusí být vyplněna celá plocha polygonu, protože hraniční body jsou pouze aproximací původních geometricky zadaných hran. To však je nežádoucí, neboť podlahové dílce musí zakrývat celou plochu místnosti.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Kompromisy při zpracování vrcholů</emphasis> &mdash; jakmile se algoritmus dostane ke konci hrany, pro zachování sudého počtu hran ji vyřadí z dalšího zpracování a počítá jen s hranou na ní navazující. Někdy jsou hrany v předzpracování dokonce zkracovány o jedničku, aby na sebe nenavazovaly. Aby však byl vyplněn celý prostor místnosti, je zapotřebí chování na vrcholech ošetřit pokročilejším mechanismem.
				</simpara></listitem>
				<listitem><simpara><emphasis role="bold">Tabulka hran</emphasis> &mdash; v této tabulce odpovídá jeden řádek jednomu řádku v rastru. Hrany jsou uloženy do řádků, ve kterých začínají. Při neceločíselném zpracování by tabulka byla zbytečná, a tak je místo ní použit obyčejný seznam se sestupným řazením podle souřadnice <emphasis>y</emphasis> počátečního bodu.
				</simpara></listitem>
			</itemizedlist>
		</para>
		<para>
Pozměněný algoritmus se v aplikaci <emphasis>FloorPlanner</emphasis> sestává ze tří oddělených částí. Po definici potřebných datových struktur jsou tyto části obsahem následujících tří kapitol. V první části je naplněn <emphasis>seznam hran</emphasis>. Další částí je cyklus zpracovávající jednotlivé řádky vyplňování. Zde je třeba ošetřit chování na vrcholech a ve správný okamžik přidávat či odebírat hrany ze <emphasis>seznamu aktivních hran</emphasis>. Třetí částí je zpracování úseků na aktuálním řádku, jež se vyplňují jednotlivými podlahovými dílci.
		</para>
		<sect2 id="sec060501">
			<title>Datové struktury</title>
			<para>
			Následuje popis datových struktur použitých při vyplňování. Základními strukturami jsou hrana a podlahový dílec. 
			</para>
			<para><programlisting><![CDATA[
struct Edge /* hrana */
{
    GLfloat y_begin;      /* souradnice y pocatecniho bodu */
    GLfloat x_end, y_end; /* souradnice koncoveho bodu */
    GLfloat x_current;    /* souradnice x pruseciku s]]>&nbsp;<![CDATA[atualnim radkem */
    GLfloat x_increment;  /* zmena x_current pri prechodu na novy radek*/ 
};
struct Tile /* podlahový dílec */
{
    GLfloat x,y;  /* rozmery podlahoveho dilce */
};
			]]></programlisting></para>
			<para>
Hrany jsou získány z pole <envar>vertices</envar> v instanci třídy <envar>Room</envar>, a to v pouze v případě, že hrany tvoří uzavřený polygon. Velikost podlahových dílců je závislá na aktuálně vybraném typu podlahy. Pro uložení aktuální pozice algoritmu v polygonu slouží proměnné <envar>x_alg</envar> a&nbsp;<envar>y_alg</envar>.
			</para>
			<para><programlisting><![CDATA[
GLfloat x_alg; /*souradnice x v]]>&nbsp;<![CDATA[aktualnim radku*/ a
GLfloat y_alg; /*souradnice y aktualního radku*/.
			]]></programlisting></para>
			<para>
Dalšími strukturami jsou kontejnery pro uchovávání hran, ořezaných podlahových dílců a údajů o vzájemném posunutí dvou řad vůči sobě. Podrobněji jsou vysvětleny níže v popisu algoritmu.
			</para>
		</sect2>
		<sect2 id="sec060502">
			<title>Inicializace</title>
			<para>
Pole <envar>vertices</envar> je předáno na vstup algoritmu. Pokud je vyplňování provedeno pod úhlem &alpha; , jsou v tu chvíli všechny body pole <envar>vertices</envar> otočeny o &ndash;&alpha;. Hrany jsou poté uloženy s orientací shora dolů do <emphasis>seznamu hran</emphasis>. 
			</para>
			<para><programlisting><![CDATA[
list<Edge> edgelist; /*seznam hran*/
			]]></programlisting></para>
			<para>
Vodorovné hrany jsou zanedbatelné. Nejsou tedy do seznamu hran uloženy. U každé hrany je vypočítán její přírůstek <emphasis>x</emphasis> při přechodu na nový řádek. Seznam je následně setříděn sestupně podle atributu <envar>y_begin</envar>. Proměnné <envar>y_alg</envar> je přiřazena hodnota <envar>y_begin</envar> první hrany <emphasis>seznamu hran</emphasis> <envar>edgelist</envar>.
			</para>
			<para>
Kalkulaci spotřebovaného materiálu zajišťuje celočíselné počítadlo <envar>tile_counter</envar>. Před spuštěním algoritmu je počítadlo vynulováno.
			</para>
			<para>
Celý následující proces se z důvodu optimalizace ukládá do zobrazovacího seznamu. Pokud bylo prvně pole <envar>vertices</envar> otočeno, musí být nyní modelová matice vynásobena rotační maticí s úhlem &alpha;.
			</para>
		</sect2>
		<sect2 id="sec060503">
			<title>Zpracování hran na jednotlivých řádcích</title>
			<para>
Již z názvu algoritmu je patrné, že postupuje po řádcích, a to od maximální souřadnice <emphasis>y</emphasis> vyplňovaného polygonu po minimální. V jednotlivých řádcích se vyplňují úseky mezi hranami v <emphasis>seznamu aktivních hran</emphasis>. 
			</para>
			<para><programlisting><![CDATA[
list<Edge> activeedgelist; /*seznam aktivnich hran*/
			]]></programlisting></para>
			<para>
Úkolem této části algoritmu je udržovat právě <emphasis>seznam aktivních hran</emphasis> aktuální. Při zpracování jednotlivých řádků je třeba nalézt vrcholy polygonu, které se v tomto řádku nacházejí. Hrany, které v těchto vrcholech v daném řádku začínají či končí, jsou uloženy do seznamu <envar>vertexedgelist</envar>.
			</para>
			<para><programlisting><![CDATA[
list<Edge> vertexedgelist; /*seznam koncicich a zacinajicich hran*/
			]]></programlisting></para>
			<para>
Začínající hrany jsou zde přesunuty ze <emphasis>seznamu hran</emphasis> a končící ze <emphasis>seznamu aktivních hran</emphasis>. Po seřazení seznamu vzestupně podle atributu <envar>x_current</envar> odpovídají vždy dvě po sobě jdoucí hrany jednomu vrcholu, popřípadě dvěma vrcholům spojených vodorovnou hranou. Nyní je potřeba vyhodnotit situaci na vrcholu a podle toho umístit, nebo naopak neumístit hrany do dvou následujících seznamů.
			</para>
			<para><programlisting><![CDATA[
list<Edge> preedgelist; /*seznam aktivnich hran pro aktualni radek*/
list<Edge> postedgelist;  /*seznam aktivnich hran pro pristi radek*/
			]]></programlisting></para>
			<para>
Při vyhodnocování je brán ohled na to, zda se v budoucím seznamu <envar>activeedgelist</envar> bude jednat o lichou, nebo sudou hranu. Tedy zda vyplňování aktuálního úseku bude probíhat od této hrany, nebo po tuto hranu. Příklad je na obrázku 6.3, kde je vidět, že i při stejném tvaru hran se vlevo bude v aktuálním řádku zpracovávat začínající hrana, zatímco vpravo je zapotřebí ještě použít končící hranu. Dalšími ovlivňujícími faktory jsou znaménko atributu <envar>x_inkrement</envar>, velikost <envar>x_inkrement</envar> nebo zda obě hrany ve vrcholu končí či začínají. Před vykreslením aktuálního řádku jsou <emphasis>seznamu aktivních hran</emphasis> přiřazeny hrany seznamu <envar>preedgelist</envar> a po vykreslení pak hrany seznamu <envar>postedgelist</envar>.
			</para>
			<para>
			<figure float="1" id="pic06050301">
	          	<title>Příklad zpracování končících a začínajících hran.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="sah01" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
			</para>
			<para>
K dodržení minimálního posunu mezi dílci ve dvou sousedících řadách slouží kontejner <envar>lastshift</envar>. 
			</para>
			<para><programlisting><![CDATA[
vector<GLfloat> lastshift; /*vektor posunu dilcu predchoziho radku*/
			]]></programlisting></para>
			<para>
Nastavení hodnot jeho vnitřních prvků se vztahuje až k následující kapitole, avšak velikost tohoto kontejneru se musí řešit právě zde. Posun dílců vůči sobě se počítá pro každý úsek řádku odděleně, tudíž každý prvek odpovídá jednomu úseku, tedy dvěma hranám v <emphasis>seznamu aktivních hran</emphasis>. Při zvětšení či zmenšení <emphasis>seznamu aktivních hran</emphasis> je třeba přizpůsobit i velikost kontejneru <envar>lastshift</envar>.
			</para>
			<para>
Pro přechod na nový řádek je od aktuálního <envar>y_alg</envar> odečtena velikost <emphasis>y</emphasis> podlahového dílce. Hrany <emphasis>seznamu aktivních hran</emphasis> jsou nahrazeny hranami seznamu <envar>postedgelist</envar>, přičemž je pro každou hranu provedena operace přičtení <envar>x_increment</envar> k <envar>x_current</envar>. V případě začínajících hran ovšem musí dojít k přičtení pouze částečného přírůstku.
			</para>
		</sect2>
		<sect2 id="sec060504">
			<title>Vykreslení podlahových dílců do úseků na řádku</title>
			<para>
Vykreslování jednoho řádku je rozděleno na úseky. Vykreslované úseky se nachází vždy mezi lichou a sudou hranou <emphasis>seznamu aktivních hran</emphasis>. Ten však musí být na začátku každého řádku seřazen vzestupně podle <envar>x_current</envar>. Následující postup popisuje vykreslení dílců v rámci jednoho úseku mezi dvěmi hranami. U ostatních úseků na řádku je postup analogický.
			</para>
			<para>
Aktuální souřadnice <envar>x_alg</envar> je nastavena na hodnotu <envar>x_current</envar> první, tedy liché, hrany. Pokud má tato hrana záporný přírůstek <envar>x_increment</envar>, je k souřadnici <envar>x_alg</envar> přičten. Pokud se navíc jedná o končící hranu, je přičtený přírůstek pouze částečný. Analogicky je nastavena hodnota proměnné <envar>x_stop</envar>, obsahující souřadnici <emphasis>x</emphasis>, kde daný úsek končí. 
			</para>
			<para>
	        <figure float="1" id="pic06050401">
	          	<title>Nastavení proměnných na začátku úseku.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="sah03" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
			</para>
			<para>
Úseky jsou vyplňovány podlahovými dílci obdélníkového tvaru. I na zkosených hranách mají podlahové dílce pro lepší přehlednost obdélníkový tvar. Na konci a někdy i na začátku každého úseku dochází ke zkrácení dílce. Zbytek však nemůže být považován za&nbsp;odpad, ale&nbsp;musí být uložen pro použití v některé z následujících řad. Tyto zkrácené dílce jsou uchovány ve dvou, dle velikosti <emphasis>x</emphasis> seřazených, seznamech dílců.
			</para>
			<para><programlisting><![CDATA[
list<Tile> leftcut_tiles;  /*seznam zleva zkracených dilcu*/
list<Tile> rightcut_tiles; /*seznam zprava zkracených dilcu*/
			]]></programlisting></para>
			<para>
Nejdůležitější podmínkou při pokládce plovoucích podlah je dodržovat minimální posun mezi dvěmi sousedícími řadami. Proto je nutné správně zvolit první dílec každého úseku tak, aby byl posun vůči předchozí řadě dostatečný. K tomu je použit výše zmiňovaný kontejner <envar>lastshift</envar>, do kterého je vždy zaznamenána souřadnice <emphasis>x</emphasis> spojnice dvou dílců. Tato hodnota je pak použita na dalším řádku pro vložení správně dlouhého prvního dílce.
			</para>
			<para>
			<figure float="1" id="pic06050402">
	          	<title>Minimální posun dvou řad vůči sobě.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="sah02" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
			</para>
			<para>
První možností je použít jeden ze zkrácených dílců z předchozích řad. Ze seznamu zkrácených dílců <envar>leftcut_tiles</envar> je vybrán nejdelší dílec splňující podmínku dostatečného posunu. Výběr nejdelšího dílce je důležitý pro snížení počtu spotřebovaných dílců. Druhou možností je použít na začátek celý dílec. To však kvůli dodržení minimálního posunu také nemusí být možné. Pokud předchozí dva způsoby nevedou k úspěchu, je nutné zkrátit nový celý dílec. Zde je velmi důležité spolehlivě vyhodnotit situaci a zkrátit dílec co nejméně. Zbytek dílce je uložen do seznamu zprava zkrácených dílců <envar>rightcut_tiles</envar>.
			</para>
			<para>
			Hodnota proměnné <envar>x_alg</envar> je nastavena za první dílec. Následuje vyplnění úseku celými dílci. Po každém dílci je hodnota <envar>x_alg</envar> zvětšena o délku podlahového dílce. Na konci každého úseku je většinou opět nutné použít zkráceného dílce. Na potřebnou délku je zkrácen buď dostatečně dlouhý dílec ze seznamu <envar>rightcut_tiles</envar>, nebo celý dílec. Zatímco zbytek z již ořezaného dílu již zde tvoří nepoužitelný odpad, zbytek z ořezaného celého dílce je uložen do seznamu <envar>leftcut_tiles</envar> pro případné použití na začátek některé z dalších řad.
			</para>
			<para>
Svou roli zde hraje i atribut <envar>tile_counter</envar>. S každým použitým novým dílcem se jeho hodnota inkrementuje. Ve finále tento atribut udává počet spotřebovaných podlahových dílců.
			</para>
		</sect2>
	</sect1>
	<sect1 id="sec0606">
		<title>Mapování náhodných textur</title>
		<para>
		Plovoucí podlahy vynikají pestrostí vzorů a kreseb, které dřevo vytváří. Použití jedné opakující se textury by výsledný zážitek z podlahy dosti degradovalo. Pro větší variabilitu a reálnější vzhled je v aplikaci <emphasis>FloorPlanner</emphasis> pro každý typ podlahy použito celkem čtyř různých textur. Textury jsou fotokopiemi původních plovoucích podlah v dostatečném rozlišení. 
		</para>
		<para>
		Neboť jsou lamely plovoucích podlah vždy nejméně čtyřnásobně dlouhé, než jsou široké a <emphasis>OpenGL</emphasis> ve starších verzích dovoluje použití pouze textur o velikosti mocniny dvou, je možné uložit tyto čtyři textury jednotlivých lamel do textury jedné. Během kalkulace materiálu je pak každému vykreslovanému dílu předána náhodně jedna ze čtyř sad texturových souřadnic. Tím je dosaženo vizuálně uspokojivé variabilnosti podlahy.    
		</para>
		<para>
			<figure float="1" id="pic060601">
	          	<title>Příklad a aplikace textury se čtyřmi variantami lamel plovoucí podlahy.</title>
			  	<mediaobject><imageobject>
					<imagedata fileref="tex01" format="PNG"/>
				</imageobject></mediaobject>
			</figure>
		</para>
	</sect1>
</chapter>

<chapter id="ch07">
	<title>Závěr</title>
	<para>
	Aplikace pro návrh a kalkulaci plovoucích podlah jsou velkým přínosem při realizaci interiérů. Měly by poskytnout zákazníkům firem, zabývajících se prodejem a pokládkou podlah, nástroj pro zhmotnění a ucelení jejich představ. Zákazníci tak získávají nejen dobrý pocit z dobře vynaložených financí, ale díky přesnější kalkulaci také skutečně ušetří. Firmám se naopak sníží množství navráceného materiálu i konfliktů se zákazníky. Bohužel v této sféře zatím není dostupný žádný softwarový produkt. Proto v rámci této práce vznikla jednoduchá CAD aplikace <emphasis>FloorPlanner</emphasis> pro rychlý návrh plovoucích podlah.
	</para>
	<para>
  V této bakalářské práci byla nejprve rozvinuta problematika pokládky plovoucích podlah. Byly popsány různé typy pokládky i faktory ovlivňující spotřebu materiálu. Tím byly stanoveny požadavky na aplikaci. Dále byl rozveden vývoj a současný stav CAD systémů. Zejména pak byly zdůrazněny výhody objektově orientovaných AEC/CAD aplikací, jež vedly k výběru tohoto přístupu pro aplikaci <emphasis>FloorPlanner</emphasis>.
  	</para>
  	<para>
Byly zde zhodnoceny i jiné aplikace pro vizualizaci plovoucích podlah. K dispozici jsou však jen jednoduché webové aplikace nebo příliš komplikovaná a drahá řešení, která navíc nejsou pro pokládku plovoucích podlah přímo určena. Proto jsou nedostačující. 
	</para>
	<para>
  Pro vytvoření vhodné aplikace bylo potřeba specifikovat požadavky a následně vybrat vhodné metody a algoritmy, které jsou nutné pro vyhovění všech požadavků správné pokládky podlah i následné vizualizace. Implementací těchto metod spolu s jednoduchým uživatelským prostředím vznikla aplikace <emphasis>FloorPlanner</emphasis>. Byla navrhnuta tak, aby vyhověla nárokům pro co nejpřesnější kalkulaci materiálu. Je toho docíleno simulací postupů při skutečné pokládce. V atypických prostorách lze takto zpřesnit odhad oproti klasickým postupům až o několik procent. Vzhledem k vysokým cenám těchto materiálů může vést k finanční úlevě jak pro firmy, tak i pro jejich zákazníky. Navíc je možné podlahy relativně reálně zobrazit v jejich cílovém prostoru a tak u zákazníka snížit strach z neznáma a zvýšit ochotu investovat.
  	</para>
  	<para>
  Vzhledem k velkým úsporám díky této aplikaci bude i nadále vývoj aplikace pokračovat a rozšiřovat své zaměření i na jiné podlahové materiály. Tato práce také ukázala, že na trhu je v této problematice, i přes přínos těchto řešení, stále hluché místo. 
	</para>
</chapter>

<bibliography>
   <biblioentry>
      <abbrev>OpenGL</abbrev>
      <authorgroup>
         <author>
           <firstname>Dave</firstname>
           <surname>Shreiner</surname>
         </author>  
         <author>
           <firstname>Mason</firstname>
           <surname>Woo</surname>
         </author>
         <author>
           <firstname>Jackie</firstname>
           <surname>Neider</surname>
         </author>
         <author>
           <firstname>Tom</firstname>
           <surname>Davis</surname>
         </author>
      </authorgroup>
      <title>OpenGL Průvodce programátora</title>    
      <publisher>
         <publishername>Computer Press, a.s.</publishername>
      </publisher>
      <pubdate>2006</pubdate>
      <isbn>80-251-1275-6</isbn>
   </biblioentry>
   
   <biblioentry>
      <abbrev>mpg</abbrev>
      <authorgroup>
         <author>
           <firstname>Jiří</firstname>
           <surname>Žára</surname>
         </author>  
         <author>
           <firstname>Bedřich</firstname>
           <surname>Beneš</surname>
         </author>
         <author>
           <firstname>Jiří</firstname>
           <surname>Sochor</surname>
         </author>
         <author>
           <firstname>Petr</firstname>
           <surname>Felkel</surname>
         </author>
      </authorgroup>
      <title>Moderní počítačová grafika</title>    
      <publisher>
         <publishername>Computer Press, a.s.</publishername>
      </publisher>
      <pubdate>2004</pubdate>
   </biblioentry>
   
   <biblioentry>
      <abbrev>CAD history</abbrev>
      <authorgroup>
         <author>
           <firstname>Marian</firstname>
           <surname>Bozdoc</surname>
         </author>  
      </authorgroup>
      <title>iMB The History of CAD</title>    
      <publisher>
         <publishername>MB Solutions</publishername>
      </publisher>
      <pubdate>2004</pubdate>  
      <releaseinfo>Dokument dostupný na 
         <ulink url="http://mbinfo.mbdesign.net/CAD-History.htm"></ulink> (leden 2008)
      </releaseinfo>
   </biblioentry>
   
   <biblioentry>
      <abbrev>CAD</abbrev>
      <authorgroup>
         <author>
           <firstname>Michal</firstname>
           <surname>Fischer</surname>
         </author>  
         <author>
           <firstname>Petr</firstname>
           <surname>Vaněk</surname>
         </author>
      </authorgroup>
      <title>CAD I-V</title>    
      <publisher>
         <publishername>e-Architekt.cz</publishername>
      </publisher>
      <pubdate>2004</pubdate>   
      <releaseinfo>Seriál dokumentů dostupný na 
      <ulink url="http://www.e-architekt.cz/"></ulink> (leden 2008)</releaseinfo>
   </biblioentry>
   
   <biblioentry>
      <abbrev>scanline</abbrev>
      <authorgroup>
         <author>
           <firstname>Robert R.</firstname>
           <surname>Snapp</surname>
         </author>  
      </authorgroup>
      <title>Scanline Fill Algorithm</title>    
      <publisher>
         <publishername>Department of Computer Science, University of Vermont</publishername>
      </publisher>
      <pubdate>2003</pubdate>   
      <releaseinfo>Dokument dostupný na 
         <ulink url="http://www.cs.uvm.edu/~snapp/teaching/CS274/lectures/scanlinefill.pdf"></ulink> (leden 2008)
      </releaseinfo>
   </biblioentry>
   
   <biblioentry>
      <abbrev>adv oGL</abbrev>
      <authorgroup>
         <author>
           <firstname>Tom</firstname>
           <surname>McReynolds</surname>
         </author>  
         <author>
           <firstname>David</firstname>
           <surname>Blythe</surname>
         </author> 
      </authorgroup>
      <title>Advanced Graphics Programming Techniques Using OpenGL</title>    
      <publisher>
         <publishername>Elsevier Inc.</publishername>
      </publisher>
      <pubdate>2005</pubdate>
      <isbn>1-55860-659-9</isbn> 
      <releaseinfo>Dokument dostupný na adrese
         <ulink url="http://web.informatik.uni-bonn.de/II/ag-klein/global/proseminar_ss2001/course12.pdf"></ulink> (leden 2008)
      </releaseinfo>
   </biblioentry>
   
   <biblioentry>
      <abbrev>oGL bible</abbrev>
      <authorgroup>
         <author>
           <firstname>Richard S.</firstname>
           <surname>Wright</surname>
         </author>  
         <author>
           <firstname>Benjamin</firstname>
           <surname>Lipchak</surname>
         </author> 
      </authorgroup>
      <title>OpenGL Super Bible</title>    
      <publisher>
         <publishername>Macmillan Computer Publishing</publishername>
      </publisher>
      <pubdate>1996</pubdate>
      <isbn>1-57169-073-5</isbn>
   </biblioentry>
   
   <biblioentry>
      <abbrev>nehe</abbrev>
      <authorgroup>
         <author>
           <firstname>Michal</firstname>
           <surname>Turek</surname>
         </author>  
      </authorgroup>
      <title>CZ NeHe OpenGL</title>    
      <publisher>
         <publishername>Michal Turek</publishername>
      </publisher>
      <pubdate>2004</pubdate>
      <releaseinfo>Dokument dostupný na 
         <ulink url="http://nehe.ceske-hry.cz/download/download/cz_nehe_opengl.pdf"></ulink> (leden 2008)
      </releaseinfo>
   </biblioentry>

</bibliography>

<appendix id="appA">
    <title>Návod k použití aplikace FloorPlanner</title>
    <para></para>
    <sect1 id="secA01">
    	<title>Úvod</title>
    	<para>
    	<emphasis>FloorPlanner</emphasis> je aplikace pro vizualizaci a kalkulaci plovoucích podlah v interiéru. Je určena pro platformu <emphasis>Win32</emphasis>. Nabízí základní <emphasis>AEC/CAD</emphasis> funkce pro tvorbu místností, v nichž je plovoucí podlaha realizována. V příštích kapitolách tohoto návodu jsou podrobněji rozvedeny všechny funkce programu.
    	</para>
    </sect1>
    <sect1 id="secA02">
    	<title>Uživatelské prostředí</title>
    	<para>
    	Uživatelské prostředí aplikace FloorPlanner se dělí na dvě části. Vpravo jsou rozmístěny ovládací prvky pro tvorbu, ovládání, editaci i odstraňování objektů zobrazených v části vlevo. Práce na projektu se pak logicky dělí na dva způsoby. Prvním je kresba půdorysu místnosti na kreslicí plochu. Druhým je pak vizualizace a prezentace místnosti v trojrozměrném režimu. Přepínání mezi těmito režimy zajišťuje dvojice tlačítek v horní části pravého panelu.
    	</para>
    </sect1>
    <sect1 id="secA03">
    	<title>Dvojrozměrný režim</title>
    	<para>
    	Po spuštění aplikace FloorPlanner je zobrazen dvojrozměrný režim. Místnost je zobrazena formou půdorysu na pravidelné mřížce. Červeně zvýrazněné přímky označují osy soustavy. Veškeré operace, spojené s editací místnosti, lze provádět výhradně v tomto režimu. 
    	</para>
    	<para>
    	Pokud není vybrána nebo aktivována žádná z funkcí, nachází se aplikace v režimu výběru. Kliknutím lze označit jednotlivé zdi, okna, nebo dveře. V pravém horním rohu jsou pak zobrazeny informace o objektu, jako jsou rozměry, nebo délka. 
    	</para>
    	<para>
    	Manipulace s kreslicí plochou se provádí pomocí klávesy <keycap>Alt</keycap>. V kombinaci s levým tlačítkem myši s plochou posouvá a s pravým tlačítkem mění měřítko.
    	</para>
    	<para>
    	Následuje vysvětlení funkcí jednotlivých prvků rozvinovacích panelů, kterými se lze přepnout do různých režimů. Pro provedení některých akcí je nutné nejdřív označit objekt, na nějž bude funkce aplikována.
    	</para>
    	<sect2 id="secA0301">
    		<title>panel Wall editing</title>
    		<para>
    		Veškeré prvky pro přidávání, odebírání či editaci zdí, tedy i tvaru celé místnosti, jsou obsaženy v tomto panelu.
    		</para>
    		<para>
    			<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Add walls</emphasis> &mdash; stisknutím tohoto tlačítka se aplikace přepne do stavu pro vkládání zdí. Kliknutím a tahem levého tlačítka lze pak na ploše vlevo vytvářet nové zdi. Se stisknutou klávesou <keycap>Shift</keycap> lze navíc vytvářet pouze svislé či vodorovné zdi. Pro propojení dvou zdí je nutné vytvořit jejich krajní body dostatečně blízko sebe. Zeď je tvořena obdélníkem se zvýrazněnou jednou hranou. Ta označuje vnitřní okraj místnosti. 
					
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Rotate wall</emphasis> &mdash; v případě vytvoření zdi se špatnou orientací je možné zeď označit a&nbsp;následně tímto tlačítkem otočit o 180°. Pokud je označená zeď spojená s jinými zdmi, je i jejich orientace přizpůsobena.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Remove wall</emphasis> &mdash; toto tlačítko slouží k odstranění označené zdi. Spolu se zdí budou odstraněny i veškeré její okna a dveře.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Clear all</emphasis> &mdash; jednoduchý příkaz pro odstranění všech objektů na kreslicí ploše.
					</simpara></listitem>
					<listitem><simpara>Editovatelná pole <emphasis role="bold">1.point</emphasis> a <emphasis role="bold">2.point</emphasis> &mdash; při označení zdi jsou v těchto polích uvedeny souřadnice prvního i druhého bodu zdi. Jejich editací lze se zdí manipulovat. Pokud zeď sousedí s jinou zdí, jsou souřadnice upraveny i u ní. Posunem dvou bodů blízko sebe však nelze dvě rozdělené zdi propojit.
					</simpara></listitem>
					
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="secA0302">
			<title>panel Floor</title>
			<para>
			Panel <emphasis>Floor</emphasis> obsahuje prvky pro práci s podlahou. Kalkulace i zobrazení podlahy je podmíněna uzavřením místnosti. Zdi tedy musí tvořit jeden uzavřený polygon bez vzájemného křížení zdí.
			</para>
			<para>
    			<itemizedlist mark="opencircle">
    				<listitem><simpara><emphasis role="bold">Display floor</emphasis> &mdash; zásadním prvkem tohoto panelu je toto zaškrtávací tlačítko. Při splnění podmínky uzavřenosti místnosti je provedena kalkulace podlahy a plocha místnosti je vyplněna dílci plovoucí podlahy. V levém horním rohu jsou pak uvedeny informace o potřebném materiálu pro vykreslenou místnost. 
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Refresh</emphasis> &mdash; v případě změny některého z parametrů podlahy je nutné toto tlačítko použít pro přepočítání a překreslení podlahy.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Floor angle</emphasis> &mdash; hodnota tohoto pole udává pod jakým úhlem bude podlaha v místnosti vyskládávána. Původní hodnota 0° znamená směr shora dolů. 
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Get wall angle</emphasis> &mdash; směr pokládky plovoucí podlahy se většinou řídí jednou ze zdí místnosti. Tímto tlačítkem lze nastavit úhel pokládky podle právě označené zdi. Hodnota je také zkopírována do pole <emphasis>Floor angle</emphasis>.   
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Shift limit</emphasis> &mdash; tato hodnota je velice důležitá pro konečnou spotřebu materiálu. Změnou lze nastavit minimální posun v procentech mezi dvěma sousedními řadami. Snížením na povolené minimum tak lze částečně ušetřit materiál. Hodnota musí být menší než 50%.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Trash limit</emphasis> &mdash; udává délku zbytku ze zkrácené lamely, který již bude považován za&nbsp;odpad. Zvětšením lze dosáhnout pravidelnějšího vzoru.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Type</emphasis> &mdash; jednotlivé typy a vzory plovoucích podlah jsou obsahem právě tohoto seznamu. Výběrem požadované podlahy je místnost vyplněna podlahovými dílci s odpovídající velikostí i texturou.  
					</simpara></listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="secA0303">
			<title>panel Windows/Doors editing</title>
			<para>
Tento panel nabízí nástroje pro vložení dveří a oken. Vytváří tedy velikostně nastavitelné otvory ve zdech. Pro výběr mezi vytvářením oken, nebo dveří slouží dvě tlačítka předvolby.
			</para>
			<para>
				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Add</emphasis> &mdash; tlačítko přepíná do módu přidávání oken a dveří. Je nutné, aby všechna textová pole v panelu obsahovala platná data. Okno je přidáno kliknutím na předem označenou zeď.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Remove</emphasis> &mdash; tlačítko pro odstranění označeného okna, nebo dveří.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Width, Height</emphasis> &mdash; textová pole pro nastavení výšky a šířky vkládaného okna, nebo dveří. 
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">From floor to object</emphasis> &mdash; toto pole je aktivní pouze u oken a nastavuje vzdálenost spodního okraje okna od podlahy.
					</simpara></listitem>
				</itemizedlist>
			</para>	
		</sect2>
		<sect2 id="secA0304">
			<title>panel Options</title>
			<para>
			V tomto panelu je několik doplňujících nastavení ovlivňujících především zobrazení v trojrozměrném režimu. Ve dvojrozměrném módu je použitelná pouze jedna položka.
			</para>
			<para>
				<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Set position</emphasis> &mdash; toto tlačítko umožňuje nastavení pozice světla. Světlo je na ploše zobrazeno jako malý žlutý kroužek. Kliknutím na tlačítko a následně na kreslicí plochu je světlo přesunuto na pozici pod kurzorem.
					</simpara></listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
    <sect1 id="secA04">
    	<title>Trojrozměrný režim</title>
    	<para>
    	Tento režim aplikace <emphasis>FloorPlanner</emphasis> slouží především pro presentační účely. Zobrazuje místnost v trojrozměrném pohledu první osoby. Pohyb prostorem umožňuje kombinace kurzorových šipek a myši. Kurzorové šipky umožňují pohyb všemi směry ve vodorovné rovině. Pohyb myši při stisknutém levém tlačítku otáčí pohled pozorovatele. Pravé tlačítko pak slouží ke stoupání a klesání pozorovatele.
    	
    	Oproti dvojrozměrnému módu je zde jen několik možností voleb. Všechny se opět nacházejí v pravé části aplikace, nyní však pouze v jediném rozvinovacím poli.
    	</para>
    	<sect2 id="secA0401">
    		<title>panel Options</title>
    		<para>
    		Panel <emphasis>Options</emphasis> skýtá několik nastavení pro změnu zobrazení trojrozměrného režimu. Některé volby mohou být velice náročné na výkon a razantně tak prodloužit výpočetní čas scény.
    		</para>
    		<para>
    			<itemizedlist mark="opencircle">
					<listitem><simpara><emphasis role="bold">Light type</emphasis> &mdash; ze seznamu lze vybrat jeden z druhů osvětlení. Na výběr je klasické bílé sluneční světlo, nažloutlé světlo žárovky a namodrale svítící zářivka.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">MIP mapping</emphasis> &mdash; při zaškrtnutí bude aplikace <emphasis>FloorPlanner</emphasis> generovat <emphasis>MIP map</emphasis> textury. Částečně tak lze zrychlit běh aplikace na úkor náročnosti na paměť. Tuto volbu lze zapnout pouze se zapnutým filtrováním (viz <emphasis>Filtering</emphasis>).
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">High quality textures</emphasis> &mdash; odškrtnutím této položky bude velikost textur zmenšena na&nbsp;čtvrtinu. Lze tedy při minimální degradaci výsledku o něco zrychlit výpočet a&nbsp;zmenšit nároky na paměť.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Antialiasing</emphasis> &mdash; zapnutím antialiasingu lze výrazně potlačit projevy moiré a <quote>zubatých</quote> hran a docílit tak příjemného vyhlazení scény. Tento výpočet je velice časově náročný a tak je třeba volit hodnoty optimální pro právě používáný hardware.
					</simpara></listitem>
					<listitem><simpara><emphasis role="bold">Filtering</emphasis> &mdash; zapnutím některého typu filtrování lze při relativně nízkém snížení výkonu odstranit některé nepříjemné efekty textur. Textury však ztrácejí detaily a mohou působit poněkud rozmazaně. 
					</simpara></listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
</appendix>

<appendix id="appB">
	<title>Přiložené CD</title>
	<para>K této bakalářské práci je přiložen kompaktní disk s následujícím obsahem:</para>
	<para>
		<itemizedlist mark="opencircle">
			<listitem><simpara>Text této bakalářské práce ve formátech XML, PDF a PS.
			</simpara></listitem>
			<listitem><simpara>Veškeré použité obrázky ve formátu PNG.
			</simpara></listitem>
			<listitem><simpara>Zdrojový kód aplikace FloorPlanner včetně souborů projektu pro Visual Studio 2005 a použitých textur.
			</simpara></listitem>
			<listitem><simpara>Zkompilovaná aplikace FloorPlanner včetně použitých textur.
			</simpara></listitem>
		</itemizedlist>
	</para>
</appendix>

</book>