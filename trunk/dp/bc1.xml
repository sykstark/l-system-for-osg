<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % fithesis SYSTEM "http://www.fi.muni.cz/~xpavlov/fithesis.mod">
	%fithesis; ]>

<book lang="cs">

<bookinfo>
	<title>Tvorba dokumentu v XML</title>
	<subtitle>Bakalářská práce</subtitle>
	<author>
		<firstname>Jan</firstname>  
		<surname>Pavlovič</surname>
         <fi:woman>false</fi:woman>
         <fi:faculty>fi</fi:faculty>
         <fi:advisor>PhDr. Josef Prokeš, Ph.D.</fi:advisor>
	</author>
	<pubdate>jaro 2001</pubdate>
	<abstract>
		<para>Psaní dokumentů ve formátu XML DocBook sebou přináší hned několik výhod. Dokumenty lze transformovat do nejrozšířenějších formátů pro prohlížení dokumentů. A tématické vyhledávaní a katalogizace není problémem.</para>
	</abstract>
	<keywordset>
		<keyword>HTML</keyword>
		<keyword>XHTML</keyword>
		<keyword>XML</keyword>
		<keyword>SGML</keyword>
		<keyword>DTD</keyword>
		<keyword>LaTeX</keyword>
		<keyword>transformace</keyword>
	</keywordset>
</bookinfo>
 
<preface id="ch00">
<title>Předmluva</title>
<para>Tato práce byla připravena ve formátu XML s využitím DTD DocBook. Závěrečná sazba byla provedena typografickým systémem LaTeX ve stylu fithesis z písma Computer Modern ve variantě CS-font.
</para>
<para>Žijeme v době bouřlivého rozvoje informačních technologií a novinky, nad nimiž jsme se v nedávné době
rozplývali, jsou již dnes zastaralé. Občas se nám může zdát, při pohledu na jen pár měsíců staré
technologie, jak jen jsme mohli žít s něčím tak primitivním a jak jsme se mohli obejít bez vymožeností, jež máme dnes k dispozici. Každý z nás si pamatuje ty chvíle, kdy dojde k rozhodnutí zmodernizovat výpočetní stroj, který používáme k naší každodenní činnosti. Pryč jsou naše představy o koupi pouze nového procesoru či jiných komponent. Nakonec jsme stejně nuceni provést kompletní inovaci většiny zařízení, neboť technologie natolik pokročila, že již není možné staré a nové technologie efektivně kombinovat.
</para>
<para>Podobně se tak děje i na poli softwarovém. Kolikrát narážíme na fakt, že náš ještě před časem nový
program, ať už textový editor, webový prohlížeč, tabulkový procesor atd., špatně či vůbec neinterpretuje
daný dokument, který byl vytvořen novější verzí. A co teprve za pár let. Co když budeme chtít, aby námi dnes
napsaný dokument byl k přečtení i za pár let! A to bez shánění historických programů a operačních
systémů. Opravdový problém by potom nastal s vizualizací důležitých a cenných textů, jako jsou
kupříkladu návody a dokumentace.</para>
<para>Na takové a podobné problémy se pokusíme odpovědět v následujícím textu. Snad přinese i nový náhled na možnosti tvorby dokumentů a komunikace.
</para>
</preface>
<toc/>

      <chapter id="ch01">
         <title>Úvod</title>
<para>V dnešní informační době se hlavně klade důraz na efektivitu zpracování. Existuje veliké množství
lepších či horších formátů dat. Bylo by nemyslitelné při současné tendenci sjednocování a centralizace, a s
tím související i univerzalizace dostupnosti informací, opomíjet existující standardy a vytvářet si
vlastní. Chceme-li poskytnout komukoli informaci, musí být především snadno dostupná a nezkreslená. Vzájemná
nekompatibilita jednotlivých textových editorů a webových prohlížečů se stává nepřípustnou. Správnou cestou
je patrně vytváření dokumentů a aplikací striktně splňujících dané standardy. </para>
<para>S bouřlivým nástupem Internetu přichází i problém, jak se s daným denně rostoucím kvantem dat
proklestit a najít informace relevantní. Tím pádem i minimalizovat informační šum, který se k nám dostává. Nejvíce rozšířený jazyk HTML<indexterm><primary>HTML</primary></indexterm> se ukázal jako nedostačující prostředek k zaznamenávaní informací. A to ne jen z důvodu nekompatibility jednotlivých prohlížečů, jež byla způsobena často nepřesným způsobem implementace jednotlivých standardů a obohacováním jazyka individuálními schopnostmi dle každé firmy. Co je však daleko podstatnější je skutečnost, že nám jazyk HTML neumožňuje výstižně popsat logický obsah dokumentu. Jazyk HTML nám umožňuje v celku jednoduše popsat vizuální stav dokumentu, tím však bohužel jeho možnosti končí. S touto omezeností nastává problém, jak v internetovém moři informací vyhledávat. Dosud jedinou možnou metodou bylo fulltextové vyhledávání, které mnohdy nepřináší kýžený výsledek a je nutné zadat co nejvíce klíčových slov k hledanému pojmu.
</para>
<para>Potřebujeme jazyk umožňující co největší popsatelnost logického vyjádření dokumentu, jeho flexibilní vizualizaci a přenositelnost neporušující integritu dat.
</para>
         <sect1 id="sec0101">
            <title>SGML</title>
<para>Jako jednou z raných odpovědí na předešlé požadavky byl značkovací jazyk <acronym>GML</acronym><indexterm><primary>GML</primary></indexterm> (Generalized Markup Language), jehož autory jsou Charles Goldfarb, Edward Mosher a Raymond Lorie. Jedná se o velice obecný značkovací jazyk, který byl vytvořen právě pro překlenutí nekompatibilit jednotlivých systémů a programů.
</para>
<para>Jelikož se tento princip jazyka GML velice osvědčil, začala na jeho základě v 80. letech standardizační organizace ANSI vyvíjet jazyk, umožňující definici vlastních značkovacích jazyků, vhodných pro dané použití. S podobnou ideou návrhu přišlo i sdružení <acronym>GCA</acronym> (Graphics Communications Association). Již dříve vytvořilo široce použitelný formátovací jazyk GenCode. 
V rámci projektu <acronym>ODA</acronym> (Open Document Architecture), jehož cílem bylo poskytnout standardní architekturu pro vytváření, předávání, uchovávání a zpracování různorodých dokumentů v elektronické podobě, došlo ke spojení obou těchto aktivit. Což mělo za následek vznik jazyka <acronym>SGML</acronym><indexterm><primary>SGML</primary></indexterm> (Standard Generalized Markup Language), definovaný v roce 1986 ISO<indexterm><primary>ISO</primary></indexterm> normou 8879.
</para>
<para>SGML je otevřeným standardem nezávislým na platformách, výrobcích nebo aplikacích. Soubory SGML jsou ukládány jako text ASCII, což zajišťuje jejich použitelnost prakticky na libovolné počítačové platformě. 
Význam a přínos SGML se objevuje ve chvíli, kdy je dokument označen příslušnými značkovacími příkazy. Definování struktury a vnitřních vztahů v do té doby nestrukturované informaci otevírá zcela nové možnosti zpracování, publikování a opakovaného používání této informace. Např. SGML databáze může obsahovat tisíce označkovaných dokumentů a využitím vyznačené struktury z ní lze na přání publikovat obsahově stejné dokumenty mnoha různých forem. 
</para>
<para>SGML není značkovací jazyk sám o sobě, ale je to metajazyk sloužící k definování různých značkovacích jazyků. Tato definice se nazývá Document Type Definition (DTD). DTD<indexterm><primary>DTD</primary></indexterm> obsahuje definici elementů a jejich atributů, které lze v dokumentu použít. Tato definice je zapsána díky SGML ve standardizované podobě a je snadno zpracovatelná. Celý postup je možné si představit tak, že SMGL je programovací jazyk a DTD je program v něm napsaný. DTD definuje, jakou může mít dokument syntaxi - jména elementů, jejich atributů, použití, vztahy mezi nimi. Co už však nedefinuje, je význam jednotlivých elementů, který jim musí být přiřazen procesorem, který dokumenty daného formátu zpracovává. Podle Extensible Markup Language (XML) 1.0, W3C Recommendation 10-02-1998<footnote id="fn010101"><para><ulink url="http://www.w3.org/TR/1998/REC-xml-19980210">
http://www.w3.org/TR/1998/REC-xml-19980210</ulink></para>
</footnote> je procesorem nazýván takový softwarový modul (v dalším textu pro něj budeme používat termín XML
procesor, či jen procesor), který je používán pro čtení XML dokumentů a poskytuje přístup k jejich obsahu a
struktuře (Pozn.: často se používá též termín parser). Předpokládá se, že XML procesor dělá práci pro jiný
modul, nazývaný aplikace. Specifikace popisuje požadované vlastnosti XML procesoru, jak má číst data a tato
předávat aplikaci, která je dále zpracovává. Příkladem procesoru budiž např. internetový browser, který HTML
tag <programlisting>&lt;A HREF&gt;</programlisting> rozpozná jako link na nějaký zdroj a podle toho jej
zobrazí a chová se k němu. Dodejme, že HTML je definováno právě pomocí DTD SGML. Autor dokumentu tedy musí vědět, jaký význam má daný element - jak, kde a s jakými atributy jej použít - a prohlížeč zase musí vědět, jak jej zobrazit a pracovat s ním. To všechno se může dovědět právě v DTD. Aby prohlížeč věděl, jaký DTD má daný dokument použít, začíná každý dokument tzv. prologem, který určuje, podle jakého DTD byl dokument vytvořen. Příkladem prologu budiž např. <programlisting><![CDATA[<!DOCTYPE book SYSTEM "book.DTD">]]></programlisting>
</para>
<para>Je tedy možné vytvářet SGML-dokumenty (resp. XML-dokumenty - jak bude níže vysvětleno, XML má k SGML velmi blízko), které vyhovují určitému DTD, např. je možné nadefinovat DTD pro dokumenty určitého typu, které budou všeobecně přijímány, a jednotlivé skupiny uživatelů tak budou mít svůj jazyk, resp. jeho definici pro popis dokumentů. Mohou tak vzniknout specifické DTD, resp. jazyky, jako např. MathML pro matematiku, ebXML, cXML pro e-commerce, CML pro chemii či jakýkoli obor lidské činnosti. Jednou z prvních implementací XML byl tzv. Shakespeare Markup, DTD pro popis Shakespearových dramat. 
</para>
<para>Se vzrůstající technologickou vyspělostí Internetu přibyly i nároky na vizuální i formální podobu
webových stránek. Hlavně pro svoji jednoduchost si v poslední době získal oblibu jazyk HTML. Nenáročné reprezentační
stránky si dnes může vytvořit takřka kdokoli s alespoň základními znalostmi psaní textu. Nabízí se použití nemalého množství WYSIWYG editorů, kteřé programátorskou část za nás udělají sami. S tím dosáhl jazyk HTML svého
vrcholu, ovšem i hranic svých možností. Jednoduchost, která byla jeho hlavní výhodou, s sebou přináší jen velice omezené množství použitelných značek, jež dnes již zdaleka nestačí.
</para>
<para>Naproti tomu SGML by se mohlo jevit, díky své rozsáhlosti a formovatelnosti, jako ten pravý nástroj pro předávání dat. Umožňuje i používání silně specifických značek, které dokáží velice dobře vymezit logický význam textu a tím i zefektivnit následné vyhledávání. Bohužel, právě pro svoji komplexnost je implementace jazyka SGML velice náročná. V praxi stejně dochází k použití jen malá část jeho možností. Z toho důvodu byla vybrána právě ta
relevantní podmnožina, která umožňuje zdárnou tvorbu webových aplikací. A je plně využitelná rostoucím
technologickým potenciálem webu nadcházejících let. Uplatnění nachází i v mnoha jiných odvětvích informační komunikace.
</para>
	</sect1>
	<sect1 id="sec0102">
		<title>Historie</title>
<para>XML navazuje na principy a konvence jazyků SGML a HTML, vytváří jednoduchý a velice účinný mechanismus pro ukládání, šíření a zpracování informací. Hlavním podkladem pro vznik bylo SGML, ale zdědilo i některé vlastnosti HTML, takže obsahuje dodatečné vlastnosti k jeho použití na Internetu.
</para>
<para>Koncepce obecného značkování vnikla počátkem 60. let, ale nedošlo k jejímu přílišnému rozšíření, dokud nebylo vytvořeno SGML schválené organizací ISO v roce 1986 a v následujících letech se prakticky nezměnilo. Je to určitě známka velké robustnosti SGML již od samého počátku - uběhlo deset let, než nastala potřeba k provedení drobných úprav. Ve skutečnosti byla specifikace SGML až příliš pokročilá, takže některé z jejích vlastností nejsou dodnes zcela využity. Síla SGML byla jeho největší nevýhodou. Aplikace schopné práce s daty SGML se tak ukázaly jako nekompletní, chybující, dlouho vyvíjené a přitom dražší, než proprietální řešení bez SGML.
</para>
<para>Tlak na zjednodušení SGML se vhodně kryl s tlakem na vylepšení HTML a konsorcium W3C<footnote id="fn010201"><para><ulink url="http://www.w3.org">
http://www.w3.org</ulink></para></footnote> vidělo jako řešení vytvoření nového jazyka pro zaplnění této mezery. V roce 1996 bylo vytyčeno deset základních cílů, které by měl nový jazyk splňovat. Formálně byla verze 1.0 jazyka XML uvedena 1. února 1998
</para>

<figure float="1" id="obr1">
<title>Historie značkovacích jazyků</title>
<mediaobject>
<imageobject>
<imagedata fileref="history" format="PNG"/>
</imageobject>
</mediaobject>
</figure>

	</sect1>
	<sect1 id="sec0103">
		<title>Čas pro XML</title>
<para>Nový jazyk vzniklý jako podmnožina SGML, jež si zachovává většinu jeho vlastností, se nazývá
<acronym>XML</acronym><indexterm><primary>XML</primary></indexterm> (eXtensible Markup Language). XML má
možnosti tvorby vlastních DTD i jednotlivých značek použitých v dokumentu. Na rozdíl od SGML podléhá jistým
omezením ohledně formálního vzhledu daných značek (délka, oddělovače, speciální znaky, použité parametry
atd.). Jelikož se jedná o nový standard, nepodléhá problémům s použitím jiných jazyků, jako tomu bylo
kupříkladu s HTML. Můžeme si zde nadefinovat vlastní názvy jednotlivých značek, a to dokonce i v libovolném
jazyku. Navíc je syntaxe zápisu v XML oproti SGML i HTML poměrně přísná, což umožňuje snazší a jednodušší
implementaci na straně aplikací. XML se výborně hodí pro použití v oblasti textových dokumentů a stejně jako SGML již našlo nemalé použití; za zmínku stojí dokumentace v americké obraně a mnoho
jiných. Díky schopnosti ukládat logické závislosti nachází XML své uplatnění i v mnoha dalších odvětvích datové komunikace. Není v něm problémem uložit údaje z účetnictví, objednávky, faktury a mnoho jiných.
</para>
   </sect1>
	</chapter>

   <chapter id="ch02">
         <title>XML syntaxe</title>
	<sect1 id="sec0201">
		<title>Tvorba DTD</title>
<para><acronym>DTD</acronym> (Document Type Definition): tato definice typu dokumentu obsahuje instrukce,
které určují pravidla pro konkrétní typ dokumentu. DTD je velice užitečný nástroj, který nám umožní hlídat, zda mají naše dokumenty správnou strukturu. Mezi jedno z nejznámější DTD patří například DTD DocBook, které definuje elemety a atributy vhodné pro značkování dokumentů.
</para>
<para>DTD je používáno parserem, který kontroluje, zda tagy v dokumentu odpovídají předem určeným pravidlům
pro strukturu dokumentu. To je jedna z výhod, které nám DTD nabízí, tj. kontrola struktury. Další výhodou je pak možnost použití různých transformačních programů, které podle daného DTD převedou dokument z jednoho formátu do druhého.
</para>
<para>Na začátku XML souboru musíme určit, jaké DTD bude použito. Obvykle je DTD uloženo v samostatném
souboru. Jeho načtení zpřístupníme deklarací:
</para>
<programlisting><![CDATA[<!DOCTYPE kořenový element SYSTEM "URL">]]></programlisting>

<para>URL nám udává, kde je dané DTD uloženo a kořenový element je jméno elementu, ve kterém bude obsažen
celý dokument. Klíčové slovo SYSTEM<indexterm><primary>SYSTEM</primary></indexterm> bůže být nahrazeno slovem PUBLIC,<indexterm><primary>PUBLIC</primary></indexterm> což je veřejný identifikátor. Tato metoda identifikace vzdálené informace je flexibilnější, neboť nám nabízí více informací o obsahu datového souboru. Samotné DTD obsahuje deklarace čtyř typů:
</para>

<itemizedlist mark="opencircle">
	<listitem><simpara>deklarace elementů</simpara></listitem>
	<listitem><simpara>deklarace atributů</simpara></listitem>
	<listitem><simpara>deklarace entit</simpara></listitem>
	<listitem><simpara>deklarace notací</simpara></listitem>
</itemizedlist>

<para>Podrobnější informace o tvorbě DTD lze nalézt v knize: XML pro každého <citation>Kosek</citation>
</para>
	</sect1>

	<sect1 id="sec0202">
		<title>Základy XML</title>
<para>Každý XML dokument se skládá z elementů, které jsou do sebe navzájem vnořené. Elementy se v textu vyznačují pomocí tagů.
</para>

<programlisting><![CDATA[<para>nějaký text</para>]]></programlisting>

<para>Názvy tagů se zapisují mezi znaky '&lt;' a '&gt;'. Ukončovací
tag<indexterm><primary>tag</primary></indexterm> má před svým názvem ještě znak '/', aby se snadno odlišil od počátečního. Některé elementy nemusejí mít žádný obsah, zápis tagů lze zjednodušit použitím pouze jediného, ukončeného znakem '/'.
</para>

<programlisting><![CDATA[<br></br> odpovídá <br/>]]></programlisting>

<para>V XML musí být pro každý počáteční tag i tag ukončovací, rovněž nelze v dokumentu elementy křížit.
</para>

<programlisting><![CDATA[<b>takhle se to <i>dělat</b> nemůže</i>]]></programlisting>

<para>U každého počátečního tagu můžeme použít ještě
atributy,<indexterm><primary>atributy</primary></indexterm>obvykle k upřesnění významu dokumentu.
</para>

<programlisting><![CDATA[<kniha jazyk="čeština">]]></programlisting>

<para>Každý XML dokument musí být celý obsažen v jednom elementu. Nelze, aby se v dokumentu vyskytoval neotagovaný řetězec.

Ukázka malého XML dokumentu:

<programlisting><![CDATA[<?xml version="1.0" encoding="iso-8859-2"?>
<!DOCTYPE lednice SYSTEM "lednice.dtd">
<lednice>
	<popis>Seznam potravin v ledničce</popis>
	<odmražení provedeno="1.1.2001"/>
	<seznam přihrádek>
		<přihrádka>máslo</přihrádka>
		<přihrádka>lahváč</přihrádka>
		<přihrádka>lahváč</přihrádka>
	</seznam přihrádek>
</lednice>]]></programlisting>
</para>

<para>Mnohem více o syntaxi XML se lze dozvědět z knihy: The XML Companion <citation>Bradley</citation>
</para>
	</sect1>

	<sect1 id="sec0203">
		<title>Stylové jazyky</title>
<para>Ovlivnit zobrazení jednotlivých značek je možné pomocí stylu (tj. souborů pravidel nebo příkazů, které
definují, jak se dokument převede do jiného formátu). Dnes existuje několik stylových jazyků - mezi
nejznámější patří asi <acronym>CSS</acronym><indexterm><primary>CSS</primary></indexterm> (Cascading Style Sheets). Pro XML je ale mnohem vhodnější a výkonnější jazyk <acronym>XSL</acronym><indexterm><primary>XSL</primary></indexterm> (eXtensible Stylesheet Language), který dovoluje před samotným formátováním dokument různě upravit a transformovat. Další možností je ještě například <acronym>DSSSL</acronym><indexterm><primary>DSSSL</primary></indexterm> (Dokument Style Semantics and Specification Language), vyvinutý pro potřeby SGML.</para>

<figure float="1" id="obr2">
<title>Funkce stylového procesoru.</title>
<mediaobject>
<imageobject>
<imagedata fileref="styly" format="PNG"/>
</imageobject>
</mediaobject>
</figure>

<para>Standard XSL se rozděluje na dvě části:</para>

<orderedlist>
	<listitem><simpara><acronym>XSLT</acronym><indexterm><primary>XSLT</primary></indexterm> (XSL Transformation) - obsahuje nástroje pro transformaci XML dokumentu. XSLT lze použít pro transformaci XML dokumentu do XML dokumentu s jinou strukturou, do HTML dokumentu nebo třeba textového formátu. Výstupem může být i dokument, skládající se z formátovacích objektů (viz. níže) - ten pak může být pomocí speciálních programů zformátován (např. do PDF) a zobrazen nebo vytištěn.</simpara></listitem>
	<listitem><simpara><acronym>XSLFO</acronym><indexterm><primary>XSLFO</primary></indexterm> (XSL Formated Objects) definuje tzv. formátovací objekty. Ty popisují vzhled stránky (rozměry, způsob zarovnání, použitá písma, barvy ...) a její jednotlivé komponenty, čímž umožňují dokument velmi kvalitně zformátovat pro tisk nebo prezentaci na obrazovce. Formátovací objekty mají syntaxi XML, používají jmenný prostor (většinou značený fo)<footnote id="fn020301"><para><ulink url="http://www.w3.org/1999/XSL/Format">http://www.w3.org/1999/XSL/Format</ulink></para></footnote>, kořenový element je root. Element fo:root pak obsahuje element fo:layout-master-set (definice layoutu jednotlivých stránek - rozměry, okraje ...) a element fo:page-sequence (obsah jednotlivých stránek). Podrobnějších informace jsou obsaženy na stránkách konsorcia W3C viz. <citation>Clark</citation></simpara></listitem>
</orderedlist>
	</sect1>

	</chapter>
   <chapter id="ch03">
         <title>Formát, který vydrží</title>
<para>Chceme, aby náš dokument,<indexterm><primary>dokument</primary></indexterm>když už si dáváme práci s
jeho vytvořením, byl široce přenositelný, snadno transformovatelný a hlavně jednoduše dostupný. Samozřejmě
pro psaní dokumentů bylo již vytvořeno mnoho značně vyspělých nástrojů. Ať bychom se rozhodli pro formát
RTF,<indexterm><primary>RTF</primary></indexterm>či LaTeX. Přes mnoho nesporných výhod mají jednu nemalou nevýhodu, a tou je neoddělitelnost vzhledu od logického obsahu. Pokud bychom se rozhodli daný dokument publikovat v jiném formátu či jiném vzhledu, znamenalo by to kompletní vizuální zásah. Bohužel by se jednalo ve značné míře o zásah manuální. Právě tady se nám nabízí jazyk XML, který umožňuje obsahové oddělení od vizuálního. Ovšem XML nekončí svými možnostmi jen u tvorby dokumentů. Není třeba se obávat ztráty pohodlného WYSIWYG rozhraní, jako třeba u Wordu či LyXu, neboť již dnes je na trhu několik slibných editorů a jejich nárůst lze jen očekávat.
</para>
<para>Formát XML je značně obecný. Z tohoto faktu vyplývá několik ve své podstatě odlišných způsobů tvorby dokumentů.
</para>
	<sect1 id="sec0301">
		<title>Na rozcestí</title>
<para>V XML si můžeme nejen stanovit způsob výsledného vzhledu, ale i samotný proces zápisu dat v
dokumentu. Tím je míněna možnost vytvoření vlastního DTD. To nám přináší značnou výhodu, pokud jsme třeba
literárními spisovateli, či tvoříme větší množství publikací a chceme jim dát jednotný
vzhled<indexterm><primary>vzhled</primary></indexterm> úměrný našim představám. Slastná představa těchto
možností bledne s nemalým časovým zatížením při tvorbě vlastního DTD i stylů pro vzhled či
transformace. Pokud zrovna nemáme ambice a schopnosti Jiřího Kostka, nabízí se nám
použití již vytvořených standardů. Pro tuto volbu svědčí i fakt, že pokud vytvoříme dokument v DTD, kterému
budeme rozumět jen my, ztrácí se tím okamžikem veškerá jeho přenositelnost, transformace i pozdější úprava
někým jiným (v horším případě i námi samotnými). Například některé nakladatelství může mít požadavek, aby
všechny
jeho publikace měly jednotný vzhled, vytvoří proto daný styl a požaduje po autorech, aby jejich dokumenty
byly s tímto stylem kompatibilní. Či se nám líbí již někým vytvořený styl a hodláme ho aplikovat na svých
dokumentech, nemluvíce o faktu, že se prostě nechceme zabývat vytvářením vlastního stylu. Důvodem může být
ať již naše lenost či časová vytíženost. Nebo také skutečnost, že na rozdíl od psaní v DTD XML pro tvorbu
dokumentů, které je vcelku nenáročně, předpokládá vytváření stylů XSL a XSLT nemalé
znalosti. Pokud
bychom z jakéhokoli důvodu chtěli použít vlastní množinu pravidel pro XML, tedy vlastní DTD, a zároveň bychom se nechtěli uzavřít světu a jeho možnostem, nezbývá, než vytvořit buď nástroj či styl pro převod na nějaký standart.
</para>
	</sect1>
	<sect1 id="sec0302">
		<title>DocBook</title>
<para>Pokud jsme se rozhodli použít XML pro vytvoření dokumentu a jeho následnou publikaci s použitím
nějakého standardního DTD, nabízí se nám právě DocBook.<indexterm><primary>DocBook</primary></indexterm>Což je dnes asi druhá nejpoužívanější aplikace SGML/XML, hned za jazykem HTML. Vznikl v roce 1991 jako formát založený na SGML, určený především pro výměnu unixové dokumentace. V 90. letech se jeho použití rozšířilo i mezi mnoho velkých firem, které se podílely i na jeho vývoji (např. Novell, HP, Digital, Fujicu a další).
</para>
<para>V roce 1999 se péče o DocBook přesunula do sdružení OASIS<footnote id="fn030201"><para><ulink url="http://www.oasis-open.org">http://www.oasis-open.org</ulink></para></footnote>. Původní verze byla založena na SGML, dnes již je k dostání verze i pro XML<footnote id="fn030202"><para><ulink url="http://www.docbook.org">http://www.docbook.org</ulink></para></footnote>. DocBook se od svých počátků vyvinul do systému, který se hodí zejména pro tvorbu počítačové dokumentace. Bez problému ho však lze použít pro zápis libovolných knih a článků. V DocBooku je například vytvořena tato práce, dokumentace k operačnímu systému FreeBSD, ke scriptovacímu jazyku PHP a dokonce také i Linux přechází na DocBook. Používají ho i velká počítačová nakladatelství jako O&apos;Reilly<footnote id="fn030203"><para><ulink url="http://www.oreilly.com">http://www.oreilly.com</ulink></para></footnote>.
</para>
<para>Výhodou je, že mnoho editorů a nástrojů pro práci s XML v sobě přímo zahrnuje jeho podporu. K DocBooku existuje dokumentace DocBook: The Definitive Guide <citation>Walsh</citation>, který je k dispozici i v elektronické podobě<footnote id="fn030204"><para><ulink url="http://www.docbook.org">http://www.docbook.org</ulink></para></footnote>.
</para>
	</sect1>
	<sect1 id="sec0303">
		<title>Validace</title>
<para><indexterm><primary>validace</primary></indexterm>Uložení dokumentu v XML nese výhodu možnosti
zachytit pomocí elementů strukturu dokumentu. Parser nám umožní kontrolu, zda je dokument správně
strukturovaný (well-formed). Lepší parsery kontrolují, zda dokument odpovídá danému DTD, pak se takovýto
dokument nazývá validní. Parser využijeme zejména v situaci, kdy chceme ověřit, zda náš dokument neobsahuje
nějaké syntaktické a strukturní chyby. Pokud chceme, aby následná transformace XML dokumenty proběhla
korektně, je nezbytné, aby takovýto dokument byl validní. V dnešní době existuje mnoho různých druhů lepších
či horších parserů. Na samotném vrcholu stojí pravděpodobně parser SP <xref linkend="appA"/>. </para>
<para>Pro validaci XML je třeba ještě nastavit některé systémové
proměnné,<indexterm><primary>proměnné</primary></indexterm>protože jinak bude parser považovat vaše soubory za SGML a bude hlásit chyby. Nastavit je tedy třeba proměnné:
</para>

<programlisting><![CDATA[SP_CHARSET_FIXED=YES
SP_ENCODING=XML
SGML_CATALOG_FILES=c:\Program Files\sp1_3_4\pubtext\xml.soc]]></programlisting>

<para>validace se provádí příkazem:</para>

<programlisting>nsgmls -wxml -s [jmeno_xml_souboru]</programlisting>

<para>Je důležité nezapomenout na přepínač<indexterm><primary>přepínač</primary></indexterm> <parameter
class="option">-wxml,</parameter> který říká, že se má validovat jako XML. Upozorníme ještě na problém,
který může nastat, pokud budeme chtít náhodou validovat dokument v
kódování<indexterm><primary>kódování</primary></indexterm> cp1250. Nastavením <envar>SP_ENCODING</envar> na
XML říkáme, že SP se pokusí kódování souborů zjistit podle pravidel, která pro to používá XML. SP pozná a
spolupracuje s UTF-8 a iso-8859-2, avšak některé znaky z cp1250 dělají problémy. Můžeme tedy změnit kódování
našeho souboru, nebo nastavit <envar>SP_ENCODING</envar> na "windows". Stejně postupujeme, pokud máme 
problémy s jiným kódováním. </para>
<para>Pokud máme XML dokument, ke kterému neexistuje DTD, můžeme jej pomocí nsgmls také zkontrolovat. Stačí použít parametr <parameter class="option">-wno-valid</parameter> a u dokumentu pouze zkontrolujeme, zda je správně strukturovaný.
</para>
	</sect1>
	</chapter>

<!--   <chapter id="ch04"><title>Tvorba v DocBooku</title></chapter> -->

   <chapter id="ch05">
         <title>Realizace vizuálních podob</title>
	<sect1 id="sec0501">
		<title>Transformace do PDF a PS</title>
<para>Chceme-li náš výtvor prezentovat v tištěné podobě, je nutné ho z XML kódu transformací převést do
formátu vhodného pro tisk. Nejlépe k tomu poslouží formát
<acronym>PDF</acronym><indexterm><primary>PDF</primary></indexterm> (Portable Document Format) nebo <acronym>PS</acronym><indexterm><primary>PS</primary></indexterm> (PostScipt). Pro takovouto transformaci existují dva druhy postupu. První je použití XSLT transformací do FO objektů a následný převod do PDF. Na jakoby opačné straně pojetí transformace<indexterm><primary>transformace</primary></indexterm> je převod do zdrojového kódu LaTeXu na překlad do PDF či PS. Oba dva způsoby mají bezesporu své velké výhody a nevýhody.
</para>

<para>
<simplelist type="horiz" columns="2">
<member>LaTeX:</member><member></member>
<member>+</member><member>prakticky neomezená manipulovatelnost s výsledným vzhledem;</member>
<member>+</member><member>možnost použití METAFONTU (různá loga atd.);</member>
<member>+</member><member>aplikace již vytvořených cls stylů;</member>
<member>+</member><member>automatické generování obsahu, literatury a rejstříku;</member>
<member>-</member><member>alespoň minimální znalost LaTeXu;</member>
<member>-</member><member>ne příliš dokonalé styly pro převod do LaTeXu;</member>
<member>-</member><member>poněkud odlišná filozofie od pojetí XML.</member>
</simplelist>
</para>

<para>
<simplelist type="horiz" columns="2">
<member>FO:</member><member></member>
<member>+</member><member>možnost použití XSL stylů;</member>
<member>+</member><member>jednoduchost transformace;</member>
<member>-</member><member>alespoň minimální znalost XSL;</member>
<member>-</member><member>v současné době malá technická podpora pro překlad;</member>
<member>-</member><member>malá rozmanitost XSL stylů.</member>
</simplelist>
</para>


<para>Osobně jsem si zvolil metodu transformace přes LaTeX, a to z následujících důvodů. Největší problém je
dnes
asi právě s absencí rozmanitých XSL stylů pro DocBook, jediné opravdu kvalitní jsou od Normana Walshe <xref linkend="appA"/>. Tímto jsme, pokud se neodhodláme dané styly změnit ke svým představám, odsouzení smířit s výsledným vzhledem. Pokud se alespoň trochu vyznáme v používaní LaTeXu, odpadá nutnost pronikat do způsobů vytváření vlastních XSL stylů.
</para>
	</sect1>
	<sect1 id="sec0502">
		<title>Transformace do LaTeXu</title>
<para>Transformace XML dokumentu do zdrojového kódu LaTeXu je sice poněkud komplikovanější, ale pokud už se nám podaří transformace do zdrojového kódu LaTeXu, dá se říci, že jsme "za vodou". Následný překlad pomocí cslatexu či pdflatexu je poněkud z jiné oblasti než XML, a proto mu nebude dále věnována pozornost.
</para>
<para>K první části transformace použijeme XSLT nástroj J. Clarka XT <xref linkend="appA"/> a XML styly pro
LaTeX <xref linkend="appA"/>. Nejprve je třeba manuálního zásahu do XSL stylů vzhledem k potřebě lokalizace pro český jazyk. K těmto úpravám je nutná jen zběžná znalost standardu XSL, což je jedna z hlavních předností tohoto způsobu transformace, ovšem na druhou srtanu je třeba se vyznat v psaní dokumentu v prostředí LaTeXu.
</para>
<para>

v souboru <filename>docbook.xsl</filename>: 17:46 (řádek:sloupec)

<programlisting><![CDATA[<xsl:output method="text" encoding="ISO-8859-1" indent="yes"/>]]></programlisting>

na:

<programlisting><![CDATA[<xsl:output method="text" encoding="ISO-8859-2" indent="yes"/>]]></programlisting>


<filename>labelid.mod.xsl</filename>: 59 
zakomentujeme přidání prázdného řádku (způsoboval problémy při zalomování poznámek)

<programlisting><![CDATA[<!-- <xsl:text>&#10;</xsl:text> -->
]]></programlisting>


<filename>toc_lot.mod.xsl</filename>: 18
zakomentování (nechceme-li, aby byl vypsán seznam obrázků)

<programlisting><![CDATA[<!-- <xsl:text>\listoffigures&#10;</xsl:text> -->]]></programlisting>

postupně změníme řádky osahující:

<programlisting><![CDATA[<xsl:text>\documentclass[french,english,a4paper,10pt,final]
{scrreprt}&#10;</xsl:text>
<xsl:text>\else&#10;</xsl:text>
<xsl:text>\documentclass[pdftex,french,english,a4paper,10pt,final]
{scrreprt}&#10;</xsl:text>]]></programlisting>

na:

<programlisting><![CDATA[<xsl:text>\documentclass[a4paper,10pt,final]{scrreprt}&#10;</xsl:text>
<xsl:text>\else&#10;</xsl:text>
<xsl:text>\documentclass[a4paper,10pt,final]{scrreprt}&#10;</xsl:text>
]]></programlisting>

a obdobně:

<programlisting><![CDATA[\ifx\pdfoutput\undefined
\documentclass[french,english,a4paper,10pt,twoside,twocolumn]{article}
\else
\documentclass[pdftex,french,english,a4paper,10pt,twoside,twocolumn]{article}
\fi]]></programlisting>

na:

<programlisting><![CDATA[\ifx\pdfoutput\undefined
\documentclass[a4paper,10pt,final]{scrreprt}	
\else
\documentclass[pdftex,a4paper,10pt,final]{scrreprt}
\fi]]></programlisting>

dále přidáme řádek obsahující podporu pro češtinu, nejlépe pod uvedené řádky:

<programlisting><![CDATA[<xsl:text>% Most Common Packages (? need guru hint)&#10;</xsl:text>
<xsl:text>%-----------------------------------------&#10;</xsl:text>

<xsl:text>\usepackage{czech}         &#10;</xsl:text>
]]></programlisting>


<filename>preface.mod.xsl</filename>: 34
zakomentujeme a přidáme řádek (korektní zobrazení názvu předmluvy a začlenění do obsahu)

<programlisting><![CDATA[<!-- <xsl:text>&#10;{\sc </xsl:text><xsl:apply-templates select="."
 mode="title.ref"/><xsl:text>}&#10;</xsl:text> -->
<xsl:text>&#10;\chapter*{\prefacename}&#10;</xsl:text>]]></programlisting>

na řádku 45 zakomentujeme vložení odstavce a nahradíme novým řádkem (hezčí výsledné zobrazení)

<programlisting><![CDATA[<!-- <xsl:text>&#10;\paragraph*{}&#10;</xsl:text>This is a fixme !!-->
<xsl:text>&#10;</xsl:text>]]></programlisting>


<filename>vars.mod.xsl</filename>: 82:45

<programlisting><![CDATA[<xsl:variable name="latex.figure.position">[tbp]</xsl:variable>]]></programlisting>

změníme na: (LaTeX se následně nesnaží sám vhodně umístit danou oblast, ale ponechá ji na stejném místě jako v zdrojovém textu)

<programlisting><![CDATA[<xsl:variable name="latex.figure.position">[h]</xsl:variable>]]></programlisting>

dále změníme některá nastavení:
158:38

<programlisting><![CDATA[<xsl:variable name="latex.use.babel">1</xsl:variable>]]></programlisting>

na: (vypne multijazykovou podporu)

<programlisting><![CDATA[<xsl:variable name="latex.use.babel">0</xsl:variable>]]></programlisting>

159:42

<programlisting><![CDATA[<xsl:variable name="latex.use.isolatin1">1</xsl:variable>]]></programlisting>

na: (vypne přidání balíku pro jazykovou sadu iso-8859-1)

<programlisting><![CDATA[<xsl:variable name="latex.use.isolatin1">0</xsl:variable>]]></programlisting>

205:41

<programlisting><![CDATA[<xsl:variable name="latex.math.support">1</xsl:variable>]]></programlisting>

na: [vypne podporu pro matematické značení (pokud zrovna v textu nepoužíváme žádné složité matematické
výrazy, je zcela zbytečná a pouze zdržuje proces překladu)]

<programlisting><![CDATA[<xsl:variable name="latex.math.support">0</xsl:variable>]]></programlisting>


<filename>book.mod.xsl</filename>: 18:11

<programlisting><![CDATA[<xsl:text> \footnote{</xsl:text><xsl:value-of select="."/><xsl:text>}</xsl:text>]]></programlisting>

odstraníme mezeru (opět pro zkrásnění zobrazení indexu poznámek)

<programlisting><![CDATA[<xsl:text>\footnote{</xsl:text><xsl:value-of select="."/><xsl:text>}</xsl:text>]]></programlisting>


<filename>labelid.mod.xsl</filename>: 64

<programlisting><![CDATA[	<xsl:text>}{}&#10;</xsl:text>]]></programlisting>

nahradíme (lepší zobrazení indexu poznámky)

<programlisting><![CDATA[	<xsl:text>}{}</xsl:text>]]></programlisting>


<filename>inline.mod.xsl</filename>: 26:14, 35:14, 44:14, 53:14, 62:14
odstraníme mezery v následujících řádcích pro korektní zvýrazňování:

<programlisting><![CDATA[	<xsl:text> {\tt </xsl:text>
	<xsl:text> {\bf </xsl:text>
	<xsl:text> {\em </xsl:text>
	<xsl:text> {\bf {\tt </xsl:text>
	<xsl:text> {\em {\tt </xsl:text>]]></programlisting>

na

<programlisting><![CDATA[	<xsl:text>{\tt </xsl:text>
	<xsl:text>{\bf </xsl:text>
	<xsl:text>{\em </xsl:text>
	<xsl:text>{\bf {\tt </xsl:text>
	<xsl:text>{\em {\tt </xsl:text>]]></programlisting>


následují úpravy XSL pro použití cls stylu fithesis,<indexterm><primary>fithesis</primary></indexterm>
používaného k
sazbě diplomových a nově i bakalářských prací.


<filename>vars.mod.xsl</filename>:
přidáme kód pro zapnutí volitelné podpory stylu fithesis a indikaci používání koncovek rodu ženského v prohlášení

<programlisting><![CDATA[				<!-- fithesis -->
<xsl:variable name="latex.fithesis.support">1</xsl:variable>
<xsl:variable name="latex.fithesis.woman">false</xsl:variable>]]></programlisting>


<filename>book.mod.xsl</filename>:
přidáme podporu pro včlenění titulní strany a čestného prohlášení

<programlisting><![CDATA[<!-- fithesis -->
<xsl:if test="$latex.fithesis.support=1">
<xsl:text>%-----------------------------------------&#10;</xsl:text>
<xsl:text>% Useing fithesis &#10;</xsl:text>
<xsl:text>%-----------------------------------------&#10;</xsl:text>
	<xsl:text>\FrontMatter&#10;</xsl:text>
	<xsl:text>\ThesisTitlePage&#10;</xsl:text>
	<xsl:text>\begin{ThesisDeclaration}&#10;</xsl:text>
	<xsl:text>\woman</xsl:text>
	<xsl:value-of select="$latex.fithesis.woman"/>
	<xsl:text>&#10;</xsl:text>
	<xsl:text>\DeclarationText&#10;</xsl:text>
	<xsl:text>\end{ThesisDeclaration}&#10;</xsl:text>
</xsl:if>]]></programlisting>

external cover page obalíme tagem, který se uplatní pouze při vypnuté podpoře pro styl fithesis

<programlisting><![CDATA[<xsl:if test="$latex.fithesis.support=0">

<!-- Include external Cover page if specified -->
<xsl:text>&#10;\InputIfFileExists{</xsl:text><xsl:value-of
select="$latex.titlepage.file"/>
<xsl:text>}{\typeout{WARNING: Using cover page</xsl:text>
<xsl:value-of select="$latex.titlepage.file"/>
<xsl:text>}}</xsl:text>
<xsl:text>{\maketitle}&#10;</xsl:text>
<xsl:call-template name="label.id"/>
</xsl:if>]]></programlisting>


<filename>toc_lot.mod.xsl</filename>:
přidáme do templatu toc následující řádky, pro obnovení arabského číslování<indexterm><primary>číslování</primary></indexterm>

<programlisting><![CDATA[<!-- fitimes -->
<xsl:if test="$latex.fithesis.support=1">
<xsl:text>\MainMatter&#10;</xsl:text>
</xsl:if>]]></programlisting>


<filename>preamble.mod.xsl</filename>:
do templatu: generate.latex.book.preamble přidáme kód pro provedení začlenění potřebých příkazů stylu fithesis na řádek 125

<programlisting><![CDATA[<!-- fithesis -->
	<xsl:call-template name="latex.fithesis"/>]]></programlisting>

v příkazech pro vložení stylu výsledného LaTeXového dokumentu změníme atributy na

<programlisting><![CDATA[\documentclass[oneside,11pt,final]{fithesis}]]></programlisting>

a

<programlisting><![CDATA[\documentclass[pdftex,oneside,11pt,final]{fithesis}]]></programlisting>

změníme podtrhávání plovoucích objektů figures na řádku: 338

<programlisting><![CDATA[<xsl:text> \floatstyle{ruled}&#10;</xsl:text>]]></programlisting>

na

<programlisting><![CDATA[<xsl:text> \floatstyle{plain}&#10;</xsl:text>]]></programlisting>

ke konci souboru  přidáme kód pro vložení fithesis hlavičky:

<programlisting><![CDATA[<!--##################################################
 |  	latex.fithesis 
 |- ##################################################
 |
 + ################################################### -->

<doc:template name="latex.fithesis" xmlns="">
<refpurpose> Declared fithesis cls </refpurpose>
<refdescription>
</refdescription>
<refreturn>
</refreturn>
</doc:template>

<xsl:template name="latex.fithesis">
<xsl:if test="$latex.fithesis.support=1">
<xsl:text>%------------------------------------------&#10;</xsl:text>
<xsl:text>% Load fithesis param &#10;</xsl:text>
<xsl:text>%------------------------------------------&#10;</xsl:text>
	<xsl:text>\thesistitle{</xsl:text>
	<xsl:apply-templates select="bookinfo/title" mode="titlepage.mode"/>
	<xsl:text>}&#10;</xsl:text>
	<xsl:text>\thesisstudent{</xsl:text>
  	<xsl:apply-templates select="bookinfo/author/firstname" mode="titlepage.mode"/>
	<xsl:text> </xsl:text>
  	<xsl:apply-templates select="bookinfo/author/surname" mode="titlepage.mode"/>
	<xsl:text>}&#10;</xsl:text>
	<xsl:text>\thesisyear{</xsl:text>
	<xsl:apply-templates select="bookinfo/pubdate" mode="titlepage.mode"/>
	<xsl:text>}&#10;</xsl:text>
</xsl:if>
</xsl:template>]]></programlisting>


<filename>docbook.xsl</filename>:
následující umožní používání několika přidaných tagů (&lt;bs/&gt;, &lt;small&gt;, &lt;/small&gt;)

<programlisting><![CDATA[<!-- fithesis -->
<xsl:include href="raven.xsl"/>]]></programlisting>

DTD těchto tagů je třeba přidat do záhlaví XML souboru např.:

<programlisting><![CDATA[<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
"file:\\\c:\\sgml\\docbook\\docbookx.dtd" [
<!ELEMENT bs EMPTY>
<!ELEMENT small ANY>
]>]]></programlisting>

</para>


<para>Tímto jsme dokončili nezbytnou úpravu XSL stylů a nyní je možno je používat pro transformaci do cls stylu
fithesis, používaného pro sazbu diplomových prací.
</para>
<para>Před započetím vlastní transformace je nutné ještě XML dokument podrobit řádné validaci, viz.: <xref linkend="sec0303"/>. K transformaci XML dokumentu do LaTeXu je možné použít všestranného transformačního nástroje XT<indexterm><primary>XT</primary></indexterm> <xref linkend="appA"/>. Originální distribuce<footnote id="fn050201"><para><ulink url="http://www.jclark.com/xml/xt.html">http://www.jclark.com/xml/xt.html</ulink></para></footnote> bohužel nepodporuje kódování našeho rodného jazyka, naštěstí je tu k dispozici verze, kterou upravil Jiří Kosek<footnote id="fn050202"><para><ulink url="http://www.kosek.cz">http://www.kosek.cz</ulink></para></footnote>. K celé proceduře je kromě XT zapotřebí ještě <acronym>JRE</acronym><indexterm><primary>JRE</primary></indexterm> (Java Runtime Environment) <xref linkend="appA"/>, zmíněné XSL styly a samozřejmě LaTeX <xref linkend="appA"/>. 
Jako parametry udáme cestu k programu XT, jméno zdrojového souboru XML, cestu k XSL stylům a jméno výstupního souboru.<programlisting><![CDATA[java -cp c:\sgml\xt\xt.jar com.jclark.xsl.sax.Driver [soubor_xml]
c:\sgml\docbook\xsl\latex\docbook.xsl [soubor_tex]]]></programlisting>
</para>
<para>Výsledek přeložíme buď příkazem pdfcslatex nebo cslatex. Tímto je celý proces u konce.
</para>

	</sect1>
	<sect1 id="sec0503">
		<title>Transformace do RTF</title>
<para>
I tato možnost stojí za zmínku, neboť i ona skýtá jisté výhody. Pro tuto transformaci vytvořil  Norman Walse
DSSSL styly, pomocí kterých je XML dokument v DocBooku převeden do RTF. Bohužel jsou styly napsané v SGML formátu, což značně znesnadňuje jejich případnou úpravu, neboť formát SGML, jak je zmíněno v úvodu, trpí hlavně svou komplexností. Obecně z těchto a podobných problémů standard SGML opouští a přechází se přece jenom k jednoduššímu standardu XML. Nicméně James Clark<footnote id="fn050301"><para><ulink url="http://www.jclark.com">http://www.jclark.com</ulink></para></footnote> vytvořil vynikající nástroj na převod do formátu RTF, využívající právě tyto styly.
</para>

<para>
<simplelist type="horiz" columns="2">
<member>RTF:</member><member></member>
<member>+</member><member>snadná úprava v nějakém WYSWYG editoru (Word);</member>
<member>-</member><member>malá rozmanitost DSSSL stylů.</member>
<member>-</member><member>ztráta typografické preciznosti.</member>
</simplelist>
</para>

<para>
Právě z posledního důvodu není transformace do RTF příliš vhodná. Nicméně zde existuje postup, jak tento převod uskutečnit. Jeho použití jsem vyzkoušel jak v prostředí Linuxu Red Hat, tak i pod Windows ME. Následující návod je v prostředí Windows, avšak pod operačním systémem Linux je postup takřka stejný.
</para>

<orderedlist>
	<listitem><simpara>Nejprve si stáhneme DTD pro DocBook. <xref linkend="appA"/></simpara></listitem>
	<listitem><simpara>Dále jsou nutné DSSSL styly pro DocBook. <xref linkend="appA"/></simpara></listitem>
	<listitem><simpara>A aplikace Jade 1.2.1 (v distribuci Linuxu je k dispozici OpenJade).<xref linkend="appA"/></simpara></listitem>
	<listitem><simpara>Rozbalíme kupříkladu do adresářů: DTD <filename class="directory">c:\sgml\DocBook</filename> potom ještě DSSSL styly do <filename class="directory">c:\sgml\DSSSL\docbook</filename> a Jade <filename class="directory">c:\sgml\Jade</filename></simpara></listitem>
	<listitem><simpara>Zvalidujeme pomocí SP viz kapitola o validaci. <xref linkend="sec0303"/></simpara></listitem>
	<listitem><simpara>set <envar>SGML_CATALOG_FILES=c:\sgml\Jade\catalog;c:\sgml\DocBook\isoent.cat</envar></simpara></listitem>
	<listitem><simpara>Důležité je odstranit z proměnné <envar>SGML_CATALOG_FILES</envar> položku, která by působila chybové hlášky při překladu: <filename>c:\Program Files\sp1_3_4\pubtext\xml.soc</filename></simpara></listitem>
</orderedlist>

<para>
Spustíme příkazem:<programlisting><![CDATA[jade -t rtf -d c:\sgml\dsssl\docbook\print\docbook.dsl
c:\sgml\Jade\xml.dcl [soubor_xml]]]></programlisting>
</para>
<para>Výsledkem je pak soubor v RTF.</para>

	</sect1>
	<sect1 id="sec0504">
		<title>Transformace do HTML</title>
<para>Převod do html je v celku oproti jiným transformacím nejméně problémový. I pro DocBook existují XSL styly. K této transformaci lze použít buď XSLT procesor SAXON <xref linkend="appA"/>, který nicméně akceptuje pouze kódování UTF-8. Další alternativou je použít upravený XSLT procesor XT <xref linkend="appA"/>, který pro axceptování kódování windows-1250 a iso-8859-2 upravil Jiří Kosek. Celou transformaci provedeme následujícím příkazem:
</para>
<programlisting><![CDATA[java -cp c:\sgml\xt\xt.jar com.jclark.xsl.sax.Driver [soubor_xml]
c:\sgml\DocBook\xsl\html\docbook.xsl [soubor_html]]]></programlisting>

	</sect1>
	</chapter>
	<chapter id="ch06">
         <title>Zhodnocení dostupného softwaru</title>
	<sect1 id="sec0601">
		<title>XML Browsers</title>
<para><indexterm><primary>browser</primary></indexterm>Nezbytnou součástí pro používání XML formátu jsou borwsery, 
neboli prohlížeče, jež umožní zobrazení XML dokumentu. Jelikož celá filosofie používání XML standardu
směřuje k jeho
rozšíření jako nástupce HTML a vlastně jako obecného formátu dokumentu ve všech odvětvích, očekává se jeho
implementace v nejrozšířenějších aplikacích manipulujících s dokumenty. Tedy můžeme doufat, že se tak brzy stane u i
našich oblíbených editorů a neméně tak i u webových prohlížečů. Proto asi nemá velikou cenu zabývat se všemi možnými
experimentálními XML prohlížeči, které jsou tak či tak určeny ve většině pouze pro prohlížení formátů XML, takže
jenom s nimi bychom se v dnešní době neobešli. Koplexnějším řešením jsou dnes nejvíce rozšířené
prohlížeče,
které již mají v sobě podporu pro formát XML zahrnutu. Většina trhu webových prohlížečů se dělí mezi tři
produkty:
</para>

<para>
<simplelist type="horiz" columns="1">
<member>Microsoft Internet Explorer 6</member>
<member>verze: 6.0</member>
<member>výrobce: Microsoft</member>
<member>licence: zdarma</member>
<member>platformy: Windows, Mac</member>
</simplelist>
</para>

<para>
Většina internetové populace používá k surfování po webu právě aplikaci firmy Microsoft: IE, z pohledu implementace
XML je tento produkt na úrovni lepšího průměru. Umožňuje i podporu zobrazování pomocí CSS stylů. Podpora pro XSL(T) je
založena na starším konceptu XSL. Podporuje také jmenné prostory a <acronym>VML</acronym><indexterm><primary>VML</primary></indexterm> (Vector Markup Language).
</para>

<para>
<simplelist type="horiz" columns="1">
<member>Netscape</member>
<member>verze: 6.01</member>
<member>výrobce: Netscape Communications Corporation</member>
<member>licence: zdarma</member>
<member>platformy: Linux/Unix, Win32, MacPPC</member>
</simplelist>
</para>

<para>
Asi největší konkurent firmy MS. Vývoj jádra samotného Netscapeu se zastavil ve verzi 4.79, následující verze jsou
založeny na jádru Mozilly. Tato verze není příliš vydařená, obsahuje mnoho chyb. Netscape podporuje XML, CSS, DOM, jmenné prostory a Xlink.
</para>

<para>
<simplelist type="horiz" columns="1">
<member>Mozilla</member>
<member>verze: 0.8.1</member>
<member>výrobce: Mozilla</member>
<member>licence: zdarma</member>
<member>platformy: Linux, Win32</member>
</simplelist>
</para>

<para>
Celá Mozilla je postavena na kódu Open Source, veřejně dostupného z mozilla.org. Obsahuje podporu  pro HTML 4.0, XML, CSS, XSLT, DOM jistou částí i pro jmenné prostory. Tato verze má asi nejlépe implementované standardy XML a XSL.
</para>

<para>
<simplelist type="horiz" columns="1">
<member>Opera</member>
<member>verze: 5.11</member>
<member>výrobce: Opera Software AS.</member>
<member>licence: zdarma</member>
<member>platformy: Windows, EPOC, BeOS, Linux</member>
</simplelist>
</para>

<para>
Jedná se o velice slibný projekt, který překvapil jak svou rychlostí, tak i svými zobrazovacími
schopnostmi. Podporuje CSS, CSS2, WAP-WML a XML. Do budoucnosti této aplikace jsou vkládány velké naděje a
již dnes je velkým konkurentem pro největší výrobce webových prohlížečů.
</para>

<para>Mezi další webové prohlížeče podporující XML patří:
eXeMeL, XML Viewer, JUMBO, InDelv XML browser, DocZilla, Link, HyBrick. 
Více informací na xmlsoftware<footnote id="fn060101"><para><ulink
url="http://www.xmlsoftware.com/browsers">http://www.xmlsoftware.com/browsers</ulink></para></footnote>.
</para>	
	</sect1>

	<sect1 id="sec0602">
		<title>XML Editors</title>
<para>Editorů je dnes k dispozici opravdu velké množství. Mezi nejznámější patří komerční Epic, nabízející
WYSIWYG režim nebo hierarchicky pohled na strukturu dokumentu. Ve WYSIWYG režimu lze navíc zapnout
zobrazovaní tagů pro zvýšení přehledu o struktuře dokumentu. Epic má v sobě zabudovaný i formátovací
modul, z vytvořených dokumentů lze vygenerovat PostScript. Obsahuje kromě samotného DocBooku i několik dalších DTD založených na DocBooku. Z editoru lze vyvolat i další programy (formátovací procesory ...) a nabízí například i možnost importu/exportu do Wordu. Nevýhodou je ale jeho vysoká cena.
</para>
<para>Naopak úplně zdarma je použití kultovního editoru Emacs ve spojeni s balíkem PSGML. Mezi další z
produktů nabízených zdarma, který stojí za povšimnutí, je XML Cooktop. Informace o dalších editorech lze
nalézt na stránkách xmlsoftware<footnote id="fn060201"><para><ulink url="http://www.xmlsoftware.com/editors">http://www.xmlsoftware.com/editors</ulink></para></footnote>
</para>	
	</sect1>
	<sect1 id="sec0603">
		<title>XML Parsers</title>
<para>Parser<indexterm><primary>parser</primary></indexterm> slouží pro validaci (kontrolu struktury) XML dokumentu
oproti definovanému DTD. Poté umožní dalším aplikacím (většinou pres standardní rozhraní, např. SAX, DOM) přístup ke struktuře a obsahu dokumentu. Příkladem je třeba XP, SP, Xerces a další. Opět více informací na xmlsoftware<footnote id="fn060301"><para><ulink url="http://www.xmlsoftware.com/parsers">http://www.xmlsoftware.com/parsers</ulink></para></footnote>
</para>
	</sect1>
	<sect1 id="sec0604">
		<title>XSLT Engines</title>
<para>Jedná se nástroje pro transformaci XML dokumentu podle daného XSL. Asi nejznámějšími kandidáty v této kategorii
jsou  XT, XALAN, SAXON. Poslední ze jmenovaných ovšem nepodporuje žádné z českých kódování. Asi nejlepším se jeví XT, 
ve verzi, kterou  upravil Jiří Kosek. Parserů je v dnešní době opět veliké množství, a to jak ve
scriptovacích
jazycích
(Perl, Python, PHP), tak i pod Javou a C++. Jejich seznam lze nalézt na xmlsoftware<footnote
id="fn060401"><para><ulink url="http://www.xmlsoftware.com/xslt">http://www.xmlsoftware.com/xslt</ulink></para></footnote>
</para>
	</sect1>
	<sect1 id="sec0605">
		<title>XML Formatters</title>
<para>Pod tímto názvem se skrývají nástroje pro zpracování formátovacích objektů. Umožňují z jednoho dokumentu
vygenerovat PDF nebo PostScript pro tisk. Nejznámější je asi FOP<indexterm><primary>FOP</primary></indexterm> (součást
projektu Apache Cocoon). Jeho největším konkurentem je dnes komerční aplikace
XEP<indexterm><primary>XEP</primary></indexterm> (drive FO2PDF) od firmy RenderX. Bohužel FOP stále nepodporuje žádné
české kódování, dokonce i při použití UTF-8 nedojde k vysázení některých českých znaků. Další alternativou je použití
TeXového balíčku PassiveTeX,<indexterm><primary>PassiveTeX</primary></indexterm>který zastane stejnou funkci jako FOP nebo XEP, ovšem i ten má své nemalé omezení. Přehled některých dalších aplikací na xmlsoftware.<footnote id="fn060501"><para><ulink url="http://www.xmlsoftware.com/xslfo">http://www.xmlsoftware.com/xslfo</ulink></para></footnote>
</para>
	</sect1>
	<sect1 id="sec0606">
		<title>Publishing Systems</title>
<para>Představují komplexní systémy určené k publikování na webu při použití XML, které obsahují všechny potřebné
programy z výše popsaných oblastí. Těchto systému je opravdu velice mnoho, avšak většina z nich je určena
pro komerční použití. Z těch nekomerčních je velice slibným příkladem projekt Apache Cocoon, ale existuje
i
množství dalších; viz. xmlsoftware.<footnote id="fn060601"><para><ulink
url="http://www.xmlsoftware.com/publishing">http://www.xmlsoftware.com/publishing</ulink></para></footnote>  
</para>
	</sect1>

	</chapter>
	<chapter id="ch07">
         <title>Závěr</title>
<para>V dnešní době je dostupné nemalé množství komplexních řešení, jež nám zprostředkují veškeré potřebné úpravy XML
dokumentů. Celá tato technologie je teprve na začátku, a proto nelze očekávat naprosto automatizované
řešení daných
úkolů. Pořád je třeba řady manuálních úprav a přenastavení. Nejvíce práce je ovšem ve vytváření či v modifikaci XSL
stylů pro výsledné zobrazení či transformaci. Ačkoli se může zdát, že otázka univerzálního kódování byla již dávno
vyřešena, pořád se lze setkat s nekompatibilitou mnoha aplikací ke znakovým sadám, používaných v našich krajích. XML
jako formát má nepopiratelně svou výhodu ve standardu, podle kterého byl vytvořen. To umožňuje použití
dokumentů i v 
budoucnu, kdy bude vytvořen novější software splňující dané standardy. Ovšem ani zde neplatí nic zcela
úplně. Formát
XML se vyvíjí a v nejbližších letech se i vyvíjet bude. Nicméně s největší pravděpodobností nedojde k jeho výrazným
logickým změnám, takže se o budoucnost našich dokumentů nemusíme bát. Pokud je použit formát XML pro
tvorbu dokumentů, nelze od něj oddělit i formát transformace výsledného zobrazení XSL. Ten v současné době prožívá asi nejvíce změn. Tím pádem ani podpora jednotlivých webových prohlížečů nedosahuje stejné úrovně, ale výrazně se liší úrovní podpory pro jednotlivé standardy. Nejspíše nás neminou podobné problémy, jako byly u implementace HTML a hlavně CSS stylů.
</para>
<para>Samotné psaní dokumentů ve zdrojovém kódu není příliš pohodlné, proto je lepší použití nějakého WYSIWYG editoru,
bohužel dnes není dostupný žádný takovýto produkt, který by byl zdarma. Nezbývá než věřit, že se to v
brzké době
změní. Neboť
formátu XML patří zítřek v široké škále odvětví jeho použitelnosti. Způsobů celého vytváření XML dokumentu je
několik. V této práci byl použit způsob přes následnou transformaci do LaTeXu. A po jistých úpravách XSL stylu pro
tuto transformací, je tím umožněno použít cls styl fithesis, doposud široce používaný pro diplomové
práce. Tímto lze
sjednotit výsledný vzhled většiny studentských prací. Nač se rozmýšlet, zdali psát dokument ve formátu RFT či v
LaTeXu, když je tu možnost psát jej v něčem daleko univerzálnějším a poté ji do požadovaného formátu převést. XML
nám
přináší možnost široké přenositelnosti do mnoha různých systémů. Poté, co už jednou vtiskneme naše
myšlenky do
digitální podoby, nemusíme ji přepisovat pro každou variantu použití, nýbrž jednoduchou transformací z ní
uděláme
kupříkladu
publikaci v knižním formátu, webovou stránku, s možností několika verzí pro jednotlivé prohlížeče a platformy, WML
stránku, dokument v LaTeXu či ve Wordu, text slajdů na prezentaci a mnoho jiných. Omezení transformací se
tím
přenáší na vyšší úroveň, než dosud byla forma uložení a s ní pevně spjatý i výsledný vzhled. Doufám, že si
v brzké době většina uživatelů oblíbí psaní všech dokumentů v XML a tím se pro ně stane psaní
daleko pohodlnější a budou ušetřeni všech
dosavadních problémů s nejednotnými formáty a netrivialní konverzí.</para>
	</chapter>

<appendix id="appA">
<title>A</title>
<para>Odkazy na použitý software:</para>


<para>
DocBook 
<ulink url="http://www.docbook.org/xml/4.1.2">http://www.docbook.org/xml/4.1.2</ulink>
</para>
<para>DTD pro DocBook napsané v XML</para>


<para>
Dokumentace k DocBooku 
<ulink url="http://docbook.org/tdg">http://docbook.org/tdg</ulink>
</para>
<para>HTML dokumentace k DTD DocBook</para>


<para>
DSSSL styly 1.62 pro DocBook 
<ulink url="http://www.nwalsh.com/docbook/dsssl">http://www.nwalsh.com/docbook/dsssl</ulink>
</para>
<para>styly pro DocBook napsané v SGML, využívané aplikací Jade pro převod XML do RTF</para>


<para>
XSL styly 1.29 pro DocBook: 
<ulink url="http://www.nwalsh.com/docbook/xsl">http://www.nwalsh.com/docbook/xsl</ulink>
</para>
<para>styly pro DocBook používané při transformaci do HTML či FO</para>


<para>
XSL styly pro převod do LaTeXu 
<ulink url="http://www.infres.enst.fr/~casellas/docbook.html">http://www.infres.enst.fr/~casellas/docbook.html</ulink>
</para>
<para>styly umožňující transformaci z XML DocBooku do LaTeXu</para>


<para>
Jade 1.2.1 
<ulink url="http://www.jclark.com/jade">http://www.jclark.com/jade</ulink>
</para>
<para>aplikace pro transformaci DocBooku pomocí DSSSL stylů do formátu RTF</para>


<para>
JRE 1.3.0_02 
<ulink url="http://java.sun.com">http://java.sun.com</ulink>
</para>
<para>Java Runtime Environment</para>


<para>
Upravený XT parser od Jiřího Koska 
<ulink url="http://www.kosek.cz/xml/xt">http://www.kosek.cz/xml/xt</ulink>
</para>
<para>aplikace umožnující transformaci XSL transformace</para> 


<para>
PassiveTeX 1.4 
<ulink url="http://users.ox.ac.uk/~rahtz/passivetex">http://users.ox.ac.uk/~rahtz/passivetex</ulink>
</para>
<para>makra v TeXu pro převod XSL FO do PDF</para>


<para>
xmltex 
<ulink url="ftp://ftp.tex.ac.uk/tex-archive/macros/xmltex/base.zip">ftp://ftp.tex.ac.uk/tex-archive/macros/xmltex/base.zip</ulink>
</para>
<para>XML parser implementovaný jako makro v TeXu</para>


<para>
Fop 0.17.0 
<ulink url="http://xml.apache.org/fop">http://xml.apache.org/fop</ulink>
</para>
<para>systém pro vytváření a zpracování formátovacích objektů</para>


<para>
Xep 2.21 
<ulink url="http://www.renderx.com">http://www.renderx.com</ulink>
</para>
<para>komerční systém pro vytváření a zpracování formatovacích objektů</para>


<para>
Saxon 6.2.2 
<ulink url="http://users.iclway.co.uk/mhkay/saxon">http://users.iclway.co.uk/mhkay/saxo
n</ulink>
</para>
<para>nástroj pro transformaci XML dokumentu podle daného XSL</para>


<para>
Sp 1.3.4 
<ulink url="http://www.jclark.com/sp">http://www.jclark.com/sp</ulink>
</para>
<para>vynikající parser podporující XML</para>


<para>
PDFlib 4.0 
<ulink url="http://www.pdflib.com">http://www.pdflib.com</ulink>
</para>
<para>aplikace pro transformaci FO objektů do PDF</para>


<para>
TeX Live 5 
<ulink url="http://www.texlive.org">http://www.texlive.org</ulink>
</para>
<para>rozsáhlý TeXový systém obsahující i nadstavdu LaTeX</para>
</appendix>

<appendix id="appB">
<title>B</title>
<para>Součástí práce je i přiložené CD, kde jsou k dispozici jednotlivé ukazky:
<itemizedlist mark="opencircle">
	<listitem><simpara>zdrojový kód této práce ve formátu XML</simpara></listitem>
	<listitem><simpara>zdrojový kód této práce ve LaTeX</simpara></listitem>
	<listitem><simpara>tato práce ve formátu PDF, vygenerovaná pomocí aplikace XT, XSL stylů a systému LaTeX</simpara></listitem>
	<listitem><simpara>tato práce ve formátu HTML vygenerovaná aplikací XT a XSL stylů pro transformaci do HTML</simpara></listitem>
	<listitem><simpara>tato práce ve formáru RTF vygenerovaná aplikací Jade pomocí DSSSL stylů</simpara></listitem>
	<listitem><simpara>upravéné XSL styly pro transformaci do LaTeXu</simpara></listitem>
	<listitem><simpara>několik dalších užitečných aplikací</simpara></listitem>
</itemizedlist>
</para>
</appendix>

   <bibliography>
	<bibliodiv>
		<biblioentry>
  			<abbrev>Bradley</abbrev>
			<author>
				<firstname>Neil</firstname>
				<surname>Bradley</surname>
			</author>
     		<title>The XML Companion</title>
    		<publisher>
      	<publishername>Addison Wesley Longman Limited, Harlow 1998</publishername>
    		</publisher>
			<isbn>0-201-34285-5</isbn>
		</biblioentry>

		<biblioentry>
  			<abbrev>Walsh</abbrev>
			<author>
				<firstname>Norman</firstname>
				<surname>Walsh</surname>
			</author>
     		<title>DocBook: The Definitive Guide</title>
    		<publisher>
      	<publishername>O&apos;Reilly, Cambridge 1999</publishername>
    		</publisher>
			<isbn>1-56592-580-7</isbn>
		</biblioentry>

		<biblioentry>
  			<abbrev>Kosek</abbrev>
			<author>
				<firstname>Jiří</firstname>
				<surname>Kosek</surname>
			</author>
     		<title>XML pro každého</title>
    		<publisher>
      	<publishername>Grada Publishing, 2000</publishername>
    		</publisher>
			<isbn>80-7169-860-1</isbn>
		</biblioentry>

		<biblioentry>
  			<abbrev>Clark</abbrev>
			<author>
				<firstname>James</firstname>
				<surname>Clark</surname>
			</author>
     		<title>XSL Transformation (XSLT) Version 1.0)</title>
    		<publisher>
      	<publishername>W3C 1999</publishername>
    		</publisher>
		</biblioentry>

	</bibliodiv>
   </bibliography>
<index/>
</book>
